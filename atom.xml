<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>四百三十四点七五的小窝</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-08T13:19:05.218Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>F434</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx上手</title>
    <link href="http://example.com/2023/07/08/nginx%E4%B8%8A%E6%89%8B/"/>
    <id>http://example.com/2023/07/08/nginx%E4%B8%8A%E6%89%8B/</id>
    <published>2023-07-08T11:36:10.000Z</published>
    <updated>2023-07-08T13:19:05.218Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="什么是Nginx"><a href="#什么是Nginx" class="headerlink" title="什么是Nginx"></a>什么是Nginx</h1><ul><li>Nginx（engine x）是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP&#x2F;POP3&#x2F;SMTP服务，Nginx是由伊戈尔-塞索伊夫为俄罗斯访问量第二的站点开发的，第一个公开版本0.1.0发布于2004年10月4日</li><li>特点：<ul><li>占用内存少，并发能力强</li><li>安装简单，配置文件简洁，bug少的服务 </li><li>启动容易，几乎可做到7*24不间断运行，能够在不间断服务的情况下进行软件版本的升级</li></ul></li></ul><h1 id="Nginx的作用"><a href="#Nginx的作用" class="headerlink" title="Nginx的作用"></a>Nginx的作用</h1><blockquote><p>HTTP代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理</p></blockquote><ul><li><p>正向代理</p><p><img src="https://s2.loli.net/2023/07/08/aBkTtWp63KId8rH.png" alt="image-20230708202321733.png"></p></li><li><p>反向代理</p><p><img src="https://s2.loli.net/2023/07/08/8jbKwTeYZu5Ripa.png" alt="image-20230708200223716.png"></p></li></ul><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><ul><li><p>内置策略：</p><ul><li>轮询<ul><li>每个请求会按时间顺序逐一分配到不同的后端服务器</li><li>如果服务器down掉了，会自动剔除该服务器</li><li>缺省配置就是轮询策略</li><li>此策略适合服务器配置相当，无状态且短平快的服务使用</li></ul></li><li>加权轮询（权重）<ul><li>weight参数用于指定轮询几率，weight的默认值为1,；weight的数值与访问比率成正比，比如Tomcat 7.0被访问的几率为其他服务器的两倍</li><li>权重越高分配到需要处理的请求越多</li><li>此策略可以与least_conn和ip_hash结合使用</li><li>此策略比较适合服务器的硬件配置差别比较大的情况</li></ul></li><li>ip_hash<ul><li>指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题</li><li>ip_hash不能与backup同时使用</li><li>此策略适合有状态服务，比如session</li><li>当有服务器需要剔除，必须手动down掉</li></ul></li></ul></li><li><p>动静分离</p><ul><li><p>软件开发中，有些请求需要经过后台处理，有些请求不需要后台处理（css、jpg…..）,不需经过后台处理的文件称为静态文件，让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源分开，动静资源做好拆分后，可根据静态资源的特点将其做缓存操作，提高资源响应速度</p><p><img src="https://s2.loli.net/2023/07/08/aBkTtWp63KId8rH.png" alt="image-20230708202321733.png"></p></li></ul></li></ul><h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><ul><li><p>window</p><ul><li><a href="https://nginx.org/en/download.html">nginx: download</a></li></ul></li><li><p>Linux</p><ul><li><a href="https://nginx.org/en/download.html">nginx: download</a></li><li>参考<a href="https://zhuanlan.zhihu.com/p/109257078">Linux安装Nginx详细教程 - 知乎 (zhihu.com)</a></li></ul></li><li><p>常用指令</p><ul><li><pre><code class="shell">./nginx           # 启动./nginx -s stop   # 停止./nginx -s quit   # 安全退出./nginx -s reload # 重新加载配置文件ps aux|grep nginx # 查看nginx进程</code></pre></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Docker入门</title>
    <link href="http://example.com/2023/07/02/Docker%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/07/02/Docker%E5%85%A5%E9%97%A8/</id>
    <published>2023-07-02T03:13:14.000Z</published>
    <updated>2023-07-05T09:05:09.640Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-Docker-概述"><a href="#1-Docker-概述" class="headerlink" title="1. Docker 概述"></a>1. Docker 概述</h2><blockquote><p>开源</p><p>思想来自集装箱</p><p>隔离：Docker核心思想，打包装箱，每个箱子都是互相隔离的</p></blockquote><hr><blockquote><p>在容器技术出来之前，使用的是虚拟机技术</p><p>虚拟机： 在windows中装一个VmWare，通过软件可以虚拟出来一代或多台， 但过于笨重</p><p>虚拟机也属于虚拟化技术，Docker容器技术，也是一种虚拟化技术</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">vm： linux centos原生镜像（相当于一台电脑） ， 隔离，需要开启多个虚拟机 （，耗时）<br>docker： 隔离，镜像 （秒级启动）<br></code></pre></td></tr></table></figure><hr><p>Docker基于Go语言开发 ，开源项目</p><p>文档地址：<a href="https://docs.docker.com/">https://docs.docker.com/</a></p><p>仓库地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a></p><h6 id="Docker能干嘛？"><a href="#Docker能干嘛？" class="headerlink" title="Docker能干嘛？"></a>Docker能干嘛？</h6><ol><li><p>虚拟机技术：</p><ol><li>资源占用</li><li>冗余步骤多</li><li>启动慢</li></ol></li><li><p>容器化技术</p><p>容器化技术不是模拟一个完整的操作系统</p></li><li><p>比较不同</p><ol><li>传统虚拟机，虚拟出一条硬件，运行一个完整的操作系统，然后再这个系统上安装和运行软件</li><li>容器内的应用直接运行在宿主机的内容，容器是没有自己的内核，也没有虚拟我们的硬件，所以轻便</li><li>每个容器互相隔离，每个容器内都有一个属于自己的文件系统，互不影响</li></ol></li><li><p>Docker优点</p><blockquote><p>DevOps（开发 、 运维）</p></blockquote><ol><li><p>应用更快速的交付和部署</p><blockquote><p>传统：一堆帮助文档安装程序</p><p>Docker： 打包镜像发布测试，一件运行</p></blockquote></li><li><p>更便捷的升级和扩缩容</p><blockquote><p>项目打包成一个镜像，扩展 服务器A 、 服务器B</p></blockquote></li><li><p>更简单的系统运维</p><blockquote><p>在容器化之后，开发测试环境都是高度一致的</p></blockquote></li><li><p>更高效的计算资源利用</p><blockquote><p>Docker 是内核级别的虚拟化，可以在一个物理机上运行很多个容器实例</p></blockquote></li></ol></li></ol><hr><h3 id="Docker-安装"><a href="#Docker-安装" class="headerlink" title="Docker 安装"></a>Docker 安装</h3><h5 id="基本组成："><a href="#基本组成：" class="headerlink" title="基本组成："></a>基本组成：</h5><ol><li>镜像（image）： docker镜像好比一个模板，可以通过这个模板来创建容器服务，tomcat镜像&#x3D;&#x3D;&gt; run &#x3D;&#x3D;&gt; tomcat01容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中）</li><li>容器（container）：Docker利用容器技术，独立运行一个或者一组项目，通过镜像来创建，可以理解成建议的linux系统</li><li>仓库（repository）： 存放镜像的地方，仓库分为公有仓库和私有仓库</li></ol><h5 id="环境查看"><a href="#环境查看" class="headerlink" title="环境查看"></a>环境查看</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">系统内核需要 3.10 以上</span><br>[root@f434 /]# uname -r<br>3.10.0-957.el7.x86_64<br><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">系统版本</span><br>[root@f434 /]# cat /etc/os-release <br>NAME=&quot;CentOS Linux&quot;<br>VERSION=&quot;7 (Core)&quot;<br>ID=&quot;centos&quot;<br>ID_LIKE=&quot;rhel fedora&quot;<br>VERSION_ID=&quot;7&quot;<br>PRETTY_NAME=&quot;CentOS Linux 7 (Core)&quot;<br>ANSI_COLOR=&quot;0;31&quot;<br>CPE_NAME=&quot;cpe:/o:centos:centos:7&quot;<br>HOME_URL=&quot;https://www.centos.org/&quot;<br>BUG_REPORT_URL=&quot;https://bugs.centos.org/&quot;<br><br>CENTOS_MANTISBT_PROJECT=&quot;CentOS-7&quot;<br>CENTOS_MANTISBT_PROJECT_VERSION=&quot;7&quot;<br>REDHAT_SUPPORT_PRODUCT=&quot;centos&quot;<br>REDHAT_SUPPORT_PRODUCT_VERSION=&quot;7&quot;<br><br><br></code></pre></td></tr></table></figure><h5 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum remove docker*<br></code></pre></td></tr></table></figure><h5 id="需要的安装包"><a href="#需要的安装包" class="headerlink" title="需要的安装包"></a>需要的安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install -y yum-utils<br></code></pre></td></tr></table></figure><h5 id="设置镜像仓库-aliyun"><a href="#设置镜像仓库-aliyun" class="headerlink" title="设置镜像仓库(aliyun)"></a>设置镜像仓库(aliyun)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>--add-repo \<br>http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure><h5 id="安装Docker-docker-ce-–-gt-社区版-docker-ee-–-gt-企业版"><a href="#安装Docker-docker-ce-–-gt-社区版-docker-ee-–-gt-企业版" class="headerlink" title="安装Docker (docker-ce –&gt; 社区版 docker-ee –&gt; 企业版)"></a>安装Docker (docker-ce –&gt; 社区版 docker-ee –&gt; 企业版)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">更新软件包索引</span><br>yum makechache fast<br><br>yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><h5 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl start docker<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看版本</span><br>docker version<br>[root@f434 /]# docker version<br>Client: Docker Engine - Community<br> Version:           24.0.2<br> API version:       1.43<br> Go version:        go1.20.4<br> Git commit:        cb74dfc<br> Built:             Thu May 25 21:55:21 2023<br> OS/Arch:           linux/amd64<br> Context:           default<br><br>Server: Docker Engine - Community<br> Engine:<br>  Version:          24.0.2<br>  API version:      1.43 (minimum version 1.12)<br>  Go version:       go1.20.4<br>  Git commit:       659604f<br>  Built:            Thu May 25 21:54:24 2023<br>  OS/Arch:          linux/amd64<br>  Experimental:     false<br> containerd:<br>  Version:          1.6.21<br>  GitCommit:        3dce8eb055cbb6872793272b4f20ed16117344f8<br> runc:<br>  Version:          1.1.7<br>  GitCommit:        v1.1.7-0-g860f061<br> docker-init:<br>  Version:          0.19.0<br>  GitCommit:        de40ad0<br><br></code></pre></td></tr></table></figure><h5 id="运行案例"><a href="#运行案例" class="headerlink" title="运行案例"></a>运行案例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run hello-world<br></code></pre></td></tr></table></figure><h5 id="查看下载的hello-world-镜像"><a href="#查看下载的hello-world-镜像" class="headerlink" title="查看下载的hello-world 镜像"></a>查看下载的hello-world 镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@f434 /]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED       SIZE<br>hello-world   latest    9c7a54a9a43c   7 weeks ago   13.3kB<br><br></code></pre></td></tr></table></figure><h5 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载依赖</span><br>yum remove docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除资源 （/var/lib/docker为docker的默认工作路径）</span><br>rm -rf /var/lib/docker<br></code></pre></td></tr></table></figure><h5 id="aliyun镜像加速"><a href="#aliyun镜像加速" class="headerlink" title="aliyun镜像加速"></a>aliyun镜像加速</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">1.登录阿里云找到容器服务</span><br></code></pre></td></tr></table></figure><h5 id="回顾hello-wolrd"><a href="#回顾hello-wolrd" class="headerlink" title="回顾hello-wolrd"></a>回顾hello-wolrd</h5><p>run的运行流程图</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230626175630910.png" alt="image-20230626175630910"></p><h4 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h4><h5 id="Docker是怎样工作的？"><a href="#Docker是怎样工作的？" class="headerlink" title="Docker是怎样工作的？"></a>Docker是怎样工作的？</h5><p>Docker是一个Client-Server结构的系统，Docker的守护进程运行在主机上，通过Socker从客户端访问</p><p>DockerServer 接收到Dockers-Client的指令，就会执行这个命令</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230626181117207.png" alt="image-20230626181117207"></p><h5 id="Docker为什么比VM快"><a href="#Docker为什么比VM快" class="headerlink" title="Docker为什么比VM快"></a>Docker为什么比VM快</h5><ol><li><p>Docker有着比虚拟机更少的抽象层‘</p></li><li><p>Docker 利用的宿主机的内核，VM需要的是Guest OS</p><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230626181526578.png" alt="image-20230626181526578"></p></li><li><p>新建一个容器的时候，Docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导，虚拟机是加载 Guest OS ， 分钟级别，而Docker是利用宿主机的操作系统，省略了虚拟机的复杂过程 ，秒级</p></li></ol><h3 id="Docker的常用命令"><a href="#Docker的常用命令" class="headerlink" title="Docker的常用命令"></a>Docker的常用命令</h3><h4 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker version          # 显示docker的版本信息<br>docker info             # 显示docker的系统信息<br>docker command --help   # 万能命令<br></code></pre></td></tr></table></figure><p>帮助文档地址： <a href="https://docs.docker.com/engine/reference/">https://docs.docker.com/engine/reference/</a></p><h3 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h3><h5 id="docker-images-查看所有本地的主机上的镜像"><a href="#docker-images-查看所有本地的主机上的镜像" class="headerlink" title="docker images   查看所有本地的主机上的镜像"></a>docker images   查看所有本地的主机上的镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@f434 /]# docker images -a<br>REPOSITORY    TAG       IMAGE ID       CREATED       SIZE<br>hello-world   latest    9c7a54a9a43c   7 weeks ago   13.3kB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释</span><br>REPOSITORY 镜像的仓库源<br>TAG        镜像的标签<br>IMAGE ID   镜像的ID<br>CREATED    镜像的创建时间<br>SIZE       镜像的大小<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可选项</span><br>  -a, --all             # 列出所有的镜像<br>  -q, --quiet           # 只显示镜像的ID<br></code></pre></td></tr></table></figure><h5 id="docker-search-搜索镜像"><a href="#docker-search-搜索镜像" class="headerlink" title="docker search  搜索镜像"></a>docker search  搜索镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker search mysql<br>[root@f434 /]# docker search mysql<br>NAME                            DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED<br>mysql                           MySQL is a widely used, open-source relation…   14258     [OK]       <br>mariadb                         MariaDB Server is a high performing open sou…   5449      [OK]       <br>percona                         Percona Server is a fork of the MySQL relati…   616       [OK]       <br>phpmyadmin                      phpMyAdmin - A web interface for MySQL and M…   827       [OK]       <br>bitnami/mysql                   Bitnami MySQL Docker Image                       90                   [OK]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可选项 通过收藏来过滤</span><br>  -f, --filter filter   Filter output based on conditions provided<br>      --format string   Pretty-print search using a Go template<br>      --limit int       Max number of search results<br>      --no-trunc        Don&#x27;t truncate output<br>-filter=STARS=3000 #搜索出来的镜像就是STARS大于3000的<br><br><br>[root@f434 /]# docker search mysql --filter=stars=5000<br>NAME      DESCRIPTION                                      STARS     OFFICIAL   AUTOMATED<br>mysql     MySQL is a widely used, open-source relation…   14258     [OK]       <br>mariadb   MariaDB Server is a high performing open sou…   5449      [OK]       <br>[root@f434 /]# <br><br></code></pre></td></tr></table></figure><h5 id="docker-pull-下载镜像"><a href="#docker-pull-下载镜像" class="headerlink" title="docker pull 下载镜像"></a>docker pull 下载镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载镜像 docker pull 镜像名[:tag]</span><br>[root@f434 /]# docker pull mysql<br>Using default tag: latest # 如果不写 tag ， 默认就是 latest<br>latest: Pulling from library/mysql<br>46ef68baacb7: Pull complete # 分层下载，docker image的核心，联合文件系统<br>94c1114b2e9c: Pull complete <br>ff05e3f38802: Pull complete <br>41cc3fcd9912: Pull complete <br>07bbc8bdf52a: Pull complete <br>6d88f83726a9: Pull complete <br>cf5c7d5d33f7: Pull complete <br>9db3175a2a66: Pull complete <br>feaedeb27fa9: Pull complete <br>cf91e7784414: Pull complete <br>b1770db1c329: Pull complete <br>Digest: sha256:15f069202c46cf861ce429423ae3f8dfa6423306fbf399eaef36094ce30dd75c # 签名（防伪标志）<br>Status: Downloaded newer image for mysql:latest<br>docker.io/library/mysql:latest # 真实地址<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker pull mysql &lt;===等价于===&gt; docker pull docker.io/library/mysql:latest</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定版本下载 docker pull mysql:5.7</span><br><br>[root@f434 /]# docker pull mysql:5.7<br>5.7: Pulling from library/mysql<br>70e9ff4420fb: Pull complete <br>7ca4383b183f: Pull complete <br>3e282e7651b1: Pull complete <br>1ffa0e0ca707: Pull complete <br>6eb790cf6382: Pull complete <br>2b7ffc37d8e9: Pull complete <br>4393c12228b9: Pull complete <br>389d2c130d52: Pull complete <br>e5df3caef94c: Pull complete <br>5c6aa409290d: Pull complete <br>faa350980ea9: Pull complete <br>Digest: sha256:bd873931ef20f30a5a9bf71498ce4e02c88cf48b2e8b782c337076d814deebde<br>Status: Downloaded newer image for mysql:5.7<br>docker.io/library/mysql:5.7<br><br></code></pre></td></tr></table></figure><h5 id="docker-rmi-删除镜像"><a href="#docker-rmi-删除镜像" class="headerlink" title="docker rmi  删除镜像"></a>docker rmi  删除镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@f434 /]# docker rmi -f 镜像id                          # 删除指定的容器<br>[root@f434 /]# docker rmi -f 镜像id 镜像id 镜像id 镜像id       # 删除多个容器<br>[root@f434 /]# docker rmi -f $(docker images -aq)           # 删除所有容器<br><br><br>[root@f434 /]# docker rmi 91b53e2624b4<br>Untagged: mysql:latest<br>Untagged: mysql@sha256:15f069202c46cf861ce429423ae3f8dfa6423306fbf399eaef36094ce30dd75c<br>Deleted: sha256:91b53e2624b431e562ed9076a9a506c5e78387f2cb4dad5968fd51ade839baa1<br>Deleted: sha256:29fe1268c0126fd9958677211dc48660a1b1ab4ad95560a0974950feddafb488<br>Deleted: sha256:f271de7413df4881b2d3607b62453c1c06dd9064fc1d93c5b1d3608381b4b94d<br>Deleted: sha256:974dc031751c2282d328963dc22bfc52cc1cfca840091207026c3218d1b6dff0<br>Deleted: sha256:504a7a1d5454b3a4f46f81e2e25219d130302ffbdfe0f1cd0a161715f1926285<br>Deleted: sha256:cbfdbb307419ced9a481e2076c692a1e3ecb1da3e4069a8ea6486c2829e7d65d<br>Deleted: sha256:0cc534805f7a13b6a3e1c8853fc8e483c8805e8cfe7de93da140364f20627cb6<br>Deleted: sha256:6e01ff5e5d41ba0fdd448cef4d4acb3ca236ff967f93e14088232d6423ff8cd4<br>Deleted: sha256:c3e4c2eacde3a513df33b165fe0e0ee5a2b278c70f9e30545c6525891c116915<br>Deleted: sha256:3d55a06407299c38dc4b3ab7d5c9aeb050c7538121f9617fa3fb5fd3bc2af277<br>Deleted: sha256:91c495d5f32a501a8b966be1b97fbfc1df2810f7198de113b9b0d661c5e7714c<br>Deleted: sha256:fa499cc7379fed2c60f59713f71ddda8a68227be84f612f6c1d197e3da1bf4ae<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">$(作为参数传递)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-f 递归删除</span><br>[root@f434 /]# docker rmi -f $(docker images -aq)<br>Untagged: mysql:5.7<br>Untagged: mysql@sha256:bd873931ef20f30a5a9bf71498ce4e02c88cf48b2e8b782c337076d814deebde<br>Deleted: sha256:2be84dd575ee2ecdb186dc43a9cd951890a764d2cefbd31a72cdf4410c43a2d0<br>Deleted: sha256:6e73b9eb85de983b8f09dc8343a2f857446e3b8d6dfe524ef7229fa3a43429e9<br>Deleted: sha256:0598435d4168d38c687dc6eddb5c400a4d61c7473ae0075199149d2a267aa343<br>Deleted: sha256:c515cbd5c65ac47b8db1f823a1dc8b7dc6a2e48f71ce34afa982823a45638000<br>Deleted: sha256:6fca8af01449e3945162148d6779eff3d6ad5a2c3b03a2047189a2a80fd515a6<br>Deleted: sha256:e609b760ab615fc06e0f146d70bddd2237ef77492a09c70034d99dc418aedd78<br>Deleted: sha256:fb81140926f6e013a31b6fbd4642f70b81a2f164bd7922eb4f25d85bfb379323<br>Deleted: sha256:422c4721f357ead3754ea1b3a630d5334a93db6a5d3d41642778e50194e5e9b4<br>Deleted: sha256:3356622c341e34d779294e5c450424a43bd6f55538a1dbbbdd30489f33315764<br>Deleted: sha256:10213d78b510219f6cf8e143c99d29db6ba8dc6bea318ae9c812ea5948805b39<br>Deleted: sha256:82afa988bdb62c2f462d0d88e709afaf7b529cc944ea5197633c875e2a70636f<br>Deleted: sha256:616461b0543d6905f05f2b384bc403d268886c8845a6de09629a2b022388c830<br>Untagged: hello-world:latest<br>Untagged: hello-world@sha256:a13ec89cdf897b3e551bd9f89d499db6ff3a7f44c5b9eb8bca40da20eb4ea1fa<br>Deleted: sha256:9c7a54a9a43cca047013b82af109fe963fde787f63f9e016fdc3384500c2823d<br><br></code></pre></td></tr></table></figure><h3 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h3><blockquote><p>有了镜像才可以创建容器</p><p>以centos 为例 <code>docker pull centos</code></p></blockquote><h5 id="新建容器并启动"><a href="#新建容器并启动" class="headerlink" title="新建容器并启动"></a>新建容器并启动</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run [可选参数] image<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">参数说明</span><br>--name=&quot;name&quot;        容器名称 ， 用来区分容器<br>-d                   后台方式运行<br>-it                  使用交互方式运行，进入容器查看内容<br>-P                   指定容器的端口 -P 8080：8080<br>-P ip：主机端口:容器端口<br>-p 主机端口:容器端口<br>-p 容器端口<br>容器端口<br>-p                   随即指定端口<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试 ， 启动并进入容器</span><br>[root@f434 /]# docker run -it centos<br>[root@e4e4e5f586ab /]# <br><br><br></code></pre></td></tr></table></figure><h5 id="列出所有运行的容器"><a href="#列出所有运行的容器" class="headerlink" title="列出所有运行的容器"></a>列出所有运行的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker ps</span><br>      # 列出当前正在运行的容器<br>-a    # 列出当前正在运行的容器+带出历史运行过的容器<br>-n=?  # 显示最近创建过的容器 -n=个数<br>-q    # 只显示容器的编号<br><br>[root@f434 /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES<br>[root@f434 /]# docker ps -a<br>CONTAINER ID   IMAGE          COMMAND                   CREATED          STATUS                     PORTS     NAMES<br>2162ba1f41d6   91b53e2624b4   &quot;docker-entrypoint.s…&quot;   5 minutes ago    Exited (1) 5 minutes ago             unruffled_jackson<br><br><br><br></code></pre></td></tr></table></figure><h5 id="退出容器"><a href="#退出容器" class="headerlink" title="退出容器"></a>退出容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">exit          # 退出并停止容器<br>Ctrl + P + Q  # 不停止并退出容器<br><br>[root@f434 /]# docker run -it centos<br>[root@d2d4fbb29ce2 /]# <br>[root@d2d4fbb29ce2 /]# [root@f434 /]# <br>[root@f434 /]# <br>[root@f434 /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND       CREATED          STATUS          PORTS     NAMES<br>d2d4fbb29ce2   centos    &quot;/bin/bash&quot;   15 seconds ago   Up 14 seconds             festive_mahavira<br><br></code></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker rm 容器ID                      # 删除指定的容器 ， 不能删除正在运行的容器 ， 强制删除 rm -f<br>docker rm -f $(docker ps -qa)        # 删除所有的容器<br>docker ps -a -q | xargs docker rm    # 删除所有的容器<br></code></pre></td></tr></table></figure><h5 id="启动和停止容器的操作"><a href="#启动和停止容器的操作" class="headerlink" title="启动和停止容器的操作"></a>启动和停止容器的操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker start 容器ID     # 启动容器<br>docker restart 容器ID   # 重启容器<br>docker stop 容器ID      # 停止当前正在运行的容器<br>docker kill 容器ID      # 强制停止当前容器<br></code></pre></td></tr></table></figure><h3 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h3><h5 id="后台启动容器"><a href="#后台启动容器" class="headerlink" title="后台启动容器"></a>后台启动容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜像名</span><br>[root@f434 /]# docker run -d centos<br>504778e38c3cba76e1c7eeb65b4e027781df11b98080eab0b2d3c74d4c1d654a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">问题：docker ps，发现 centos 停止</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker 容器使用后台运行，容器内必须要有一个前台进程，docker没有发现，就会自动停止</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">nginx, 容器启动后，发现没有提供服务，就会立刻停止，</span><br></code></pre></td></tr></table></figure><h5 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker logs -t -f --tail 容器id  发现容器没有日志<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">尝试自己编写脚本</span><br>&quot;while true; do echo f434; sleep 1;done&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看容器ID</span><br>[root@f434 /]# docker ps<br>CONTAINER ID   IMAGE     COMMAND                   CREATED         STATUS         PORTS     NAMES<br>f133c7d76bf0   centos    &quot;/bin/sh -c &#x27;while t…&quot;   2 minutes ago   Up 2 minutes             exciting_gates<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示日志</span><br>-ft # 显示日志<br>--tail number # 要显示日志的条数<br>[root@f434 /]# docker logs -t -f --tail 10 f133c7d76bf0<br>2023-06-26T13:13:26.906334949Z f434 sleep 1<br>2023-06-26T13:13:26.906336872Z f434 sleep 1<br>2023-06-26T13:13:26.906338849Z f434 sleep 1<br><br></code></pre></td></tr></table></figure><h5 id="查看容器中的进程信息"><a href="#查看容器中的进程信息" class="headerlink" title="查看容器中的进程信息"></a>查看容器中的进程信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">top 命令</span><br><br>[root@f434 /]# docker top f133c7d76bf0<br>UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMD<br>root                9170                9150                99                  21:04               ?                   00:12:11            /bin/sh -c while true ; do echo f434 sleep 1; done<br>[root@f434 /]# <br><br></code></pre></td></tr></table></figure><h5 id="查看镜像的元数据"><a href="#查看镜像的元数据" class="headerlink" title="查看镜像的元数据"></a>查看镜像的元数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>[root@f434 /]# docker inspect f133c7d76bf0<br>[<br>    &#123;<br>        &quot;Id&quot;: &quot;f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c&quot;,<br>        &quot;Created&quot;: &quot;2023-06-26T13:04:56.741022173Z&quot;,<br>        &quot;Path&quot;: &quot;/bin/sh&quot;,<br>        &quot;Args&quot;: [<br>            &quot;-c&quot;,<br>            &quot;while true ; do echo f434 sleep 1; done&quot;<br>        ],<br>        &quot;State&quot;: &#123;<br>            &quot;Status&quot;: &quot;running&quot;,<br>            &quot;Running&quot;: true,<br>            &quot;Paused&quot;: false,<br>            &quot;Restarting&quot;: false,<br>            &quot;OOMKilled&quot;: false,<br>            &quot;Dead&quot;: false,<br>            &quot;Pid&quot;: 9170,<br>            &quot;ExitCode&quot;: 0,<br>            &quot;Error&quot;: &quot;&quot;,<br>            &quot;StartedAt&quot;: &quot;2023-06-26T13:04:57.013701385Z&quot;,<br>            &quot;FinishedAt&quot;: &quot;0001-01-01T00:00:00Z&quot;<br>        &#125;,<br>        &quot;Image&quot;: &quot;sha256:5d0da3dc976460b72c77d94c8a1ad043720b0416bfc16c52c45d4847e53fadb6&quot;,<br>        &quot;ResolvConfPath&quot;: &quot;/var/lib/docker/containers/f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c/resolv.conf&quot;,<br>        &quot;HostnamePath&quot;: &quot;/var/lib/docker/containers/f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c/hostname&quot;,<br>        &quot;HostsPath&quot;: &quot;/var/lib/docker/containers/f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c/hosts&quot;,<br>        &quot;LogPath&quot;: &quot;/var/lib/docker/containers/f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c/f133c7d76bf05fb438ff6d51326f4516d086166e148407543fac9d55310bbe4c-json.log&quot;,<br>        &quot;Name&quot;: &quot;/exciting_gates&quot;,<br>        &quot;RestartCount&quot;: 0,<br>        &quot;Driver&quot;: &quot;overlay2&quot;,<br>        &quot;Platform&quot;: &quot;linux&quot;,<br>        &quot;MountLabel&quot;: &quot;&quot;,<br>        &quot;ProcessLabel&quot;: &quot;&quot;,<br>        &quot;AppArmorProfile&quot;: &quot;&quot;,<br>        &quot;ExecIDs&quot;: null,<br>        &quot;HostConfig&quot;: &#123;<br>            &quot;Binds&quot;: null,<br>            &quot;ContainerIDFile&quot;: &quot;&quot;,<br>            &quot;LogConfig&quot;: &#123;<br>                &quot;Type&quot;: &quot;json-file&quot;,<br>                &quot;Config&quot;: &#123;&#125;<br>            &#125;,<br>            &quot;NetworkMode&quot;: &quot;default&quot;,<br>            &quot;PortBindings&quot;: &#123;&#125;,<br>            &quot;RestartPolicy&quot;: &#123;<br>                &quot;Name&quot;: &quot;no&quot;,<br>                &quot;MaximumRetryCount&quot;: 0<br>            &#125;,<br>            &quot;AutoRemove&quot;: false,<br>            &quot;VolumeDriver&quot;: &quot;&quot;,<br>            &quot;VolumesFrom&quot;: null,<br>            &quot;ConsoleSize&quot;: [<br>                27,<br>                164<br>            ],<br>            &quot;CapAdd&quot;: null,<br>            &quot;CapDrop&quot;: null,<br>            &quot;CgroupnsMode&quot;: &quot;host&quot;,<br>            &quot;Dns&quot;: [],<br>            &quot;DnsOptions&quot;: [],<br>            &quot;DnsSearch&quot;: [],<br>            &quot;ExtraHosts&quot;: null,<br>            &quot;GroupAdd&quot;: null,<br>            &quot;IpcMode&quot;: &quot;private&quot;,<br>            &quot;Cgroup&quot;: &quot;&quot;,<br>            &quot;Links&quot;: null,<br>            &quot;OomScoreAdj&quot;: 0,<br>            &quot;PidMode&quot;: &quot;&quot;,<br>            &quot;Privileged&quot;: false,<br>            &quot;PublishAllPorts&quot;: false,<br>            &quot;ReadonlyRootfs&quot;: false,<br>            &quot;SecurityOpt&quot;: null,<br>            &quot;UTSMode&quot;: &quot;&quot;,<br>            &quot;UsernsMode&quot;: &quot;&quot;,<br>            &quot;ShmSize&quot;: 67108864,<br>            &quot;Runtime&quot;: &quot;runc&quot;,<br>            &quot;Isolation&quot;: &quot;&quot;,<br>            &quot;CpuShares&quot;: 0,<br>            &quot;Memory&quot;: 0,<br>            &quot;NanoCpus&quot;: 0,<br>            &quot;CgroupParent&quot;: &quot;&quot;,<br>            &quot;BlkioWeight&quot;: 0,<br>            &quot;BlkioWeightDevice&quot;: [],<br>            &quot;BlkioDeviceReadBps&quot;: [],<br>            &quot;BlkioDeviceWriteBps&quot;: [],<br>            &quot;BlkioDeviceReadIOps&quot;: [],<br>            &quot;BlkioDeviceWriteIOps&quot;: [],<br>            &quot;CpuPeriod&quot;: 0,<br>            &quot;CpuQuota&quot;: 0,<br>            &quot;CpuRealtimePeriod&quot;: 0,<br>            &quot;CpuRealtimeRuntime&quot;: 0,<br>            &quot;CpusetCpus&quot;: &quot;&quot;,<br>            &quot;CpusetMems&quot;: &quot;&quot;,<br>            &quot;Devices&quot;: [],<br>            &quot;DeviceCgroupRules&quot;: null,<br>            &quot;DeviceRequests&quot;: null,<br>            &quot;MemoryReservation&quot;: 0,<br>            &quot;MemorySwap&quot;: 0,<br>            &quot;MemorySwappiness&quot;: null,<br>            &quot;OomKillDisable&quot;: false,<br>            &quot;PidsLimit&quot;: null,<br>            &quot;Ulimits&quot;: null,<br>            &quot;CpuCount&quot;: 0,<br>            &quot;CpuPercent&quot;: 0,<br>            &quot;IOMaximumIOps&quot;: 0,<br>            &quot;IOMaximumBandwidth&quot;: 0,<br>            &quot;MaskedPaths&quot;: [<br>                &quot;/proc/asound&quot;,<br>                &quot;/proc/acpi&quot;,<br>                &quot;/proc/kcore&quot;,<br>                &quot;/proc/keys&quot;,<br>                &quot;/proc/latency_stats&quot;,<br>                &quot;/proc/timer_list&quot;,<br>                &quot;/proc/timer_stats&quot;,<br>                &quot;/proc/sched_debug&quot;,<br>                &quot;/proc/scsi&quot;,<br>                &quot;/sys/firmware&quot;<br>            ],<br>            &quot;ReadonlyPaths&quot;: [<br>                &quot;/proc/bus&quot;,<br>                &quot;/proc/fs&quot;,<br>                &quot;/proc/irq&quot;,<br>                &quot;/proc/sys&quot;,<br>                &quot;/proc/sysrq-trigger&quot;<br>            ]<br>        &#125;,<br>        &quot;GraphDriver&quot;: &#123;<br>            &quot;Data&quot;: &#123;<br>                &quot;LowerDir&quot;: &quot;/var/lib/docker/overlay2/d95dc7cbe6338ef067d0535944dd647d00cc1d87f9aeb7678305f73cd611d039-init/diff:/var/lib/docker/overlay2/d699d3c8f20c014846d8071de63bf44c411aa10255a634ca88d200346969ca6c/diff&quot;,<br>                &quot;MergedDir&quot;: &quot;/var/lib/docker/overlay2/d95dc7cbe6338ef067d0535944dd647d00cc1d87f9aeb7678305f73cd611d039/merged&quot;,<br>                &quot;UpperDir&quot;: &quot;/var/lib/docker/overlay2/d95dc7cbe6338ef067d0535944dd647d00cc1d87f9aeb7678305f73cd611d039/diff&quot;,<br>                &quot;WorkDir&quot;: &quot;/var/lib/docker/overlay2/d95dc7cbe6338ef067d0535944dd647d00cc1d87f9aeb7678305f73cd611d039/work&quot;<br>            &#125;,<br>            &quot;Name&quot;: &quot;overlay2&quot;<br>        &#125;,<br>        &quot;Mounts&quot;: [],<br>        &quot;Config&quot;: &#123;<br>            &quot;Hostname&quot;: &quot;f133c7d76bf0&quot;,<br>            &quot;Domainname&quot;: &quot;&quot;,<br>            &quot;User&quot;: &quot;&quot;,<br>            &quot;AttachStdin&quot;: false,<br>            &quot;AttachStdout&quot;: false,<br>            &quot;AttachStderr&quot;: false,<br>            &quot;Tty&quot;: false,<br>            &quot;OpenStdin&quot;: false,<br>            &quot;StdinOnce&quot;: false,<br>            &quot;Env&quot;: [<br>                &quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;<br>            ],<br>            &quot;Cmd&quot;: [<br>                &quot;/bin/sh&quot;,<br>                &quot;-c&quot;,<br>                &quot;while true ; do echo f434 sleep 1; done&quot;<br>            ],<br>            &quot;Image&quot;: &quot;centos&quot;,<br>            &quot;Volumes&quot;: null,<br>            &quot;WorkingDir&quot;: &quot;&quot;,<br>            &quot;Entrypoint&quot;: null,<br>            &quot;OnBuild&quot;: null,<br>            &quot;Labels&quot;: &#123;<br>                &quot;org.label-schema.build-date&quot;: &quot;20210915&quot;,<br>                &quot;org.label-schema.license&quot;: &quot;GPLv2&quot;,<br>                &quot;org.label-schema.name&quot;: &quot;CentOS Base Image&quot;,<br>                &quot;org.label-schema.schema-version&quot;: &quot;1.0&quot;,<br>                &quot;org.label-schema.vendor&quot;: &quot;CentOS&quot;<br>            &#125;<br>        &#125;,<br>        &quot;NetworkSettings&quot;: &#123;<br>            &quot;Bridge&quot;: &quot;&quot;,<br>            &quot;SandboxID&quot;: &quot;4e6de510e4aa58b344a5b8ed87b0772c35648deec54dfa3bb9b4157ec70ff5d8&quot;,<br>            &quot;HairpinMode&quot;: false,<br>            &quot;LinkLocalIPv6Address&quot;: &quot;&quot;,<br>            &quot;LinkLocalIPv6PrefixLen&quot;: 0,<br>            &quot;Ports&quot;: &#123;&#125;,<br>            &quot;SandboxKey&quot;: &quot;/var/run/docker/netns/4e6de510e4aa&quot;,<br>            &quot;SecondaryIPAddresses&quot;: null,<br>            &quot;SecondaryIPv6Addresses&quot;: null,<br>            &quot;EndpointID&quot;: &quot;8ea3573db40507857d2a3ec1dd8cde68979249de19fbff8281acd2423c645c57&quot;,<br>            &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>            &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>            &quot;GlobalIPv6PrefixLen&quot;: 0,<br>            &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>            &quot;IPPrefixLen&quot;: 16,<br>            &quot;IPv6Gateway&quot;: &quot;&quot;,<br>            &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>            &quot;Networks&quot;: &#123;<br>                &quot;bridge&quot;: &#123;<br>                    &quot;IPAMConfig&quot;: null,<br>                    &quot;Links&quot;: null,<br>                    &quot;Aliases&quot;: null,<br>                    &quot;NetworkID&quot;: &quot;7c021d6754f952673d6a17cb0c3e883e82ef7a5cb6cce00a51bf5345b425a91a&quot;,<br>                    &quot;EndpointID&quot;: &quot;8ea3573db40507857d2a3ec1dd8cde68979249de19fbff8281acd2423c645c57&quot;,<br>                    &quot;Gateway&quot;: &quot;172.17.0.1&quot;,<br>                    &quot;IPAddress&quot;: &quot;172.17.0.2&quot;,<br>                    &quot;IPPrefixLen&quot;: 16,<br>                    &quot;IPv6Gateway&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6Address&quot;: &quot;&quot;,<br>                    &quot;GlobalIPv6PrefixLen&quot;: 0,<br>                    &quot;MacAddress&quot;: &quot;02:42:ac:11:00:02&quot;,<br>                    &quot;DriverOpts&quot;: null<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>]<br><br></code></pre></td></tr></table></figure><h5 id="进入当前正在运行的容器"><a href="#进入当前正在运行的容器" class="headerlink" title="进入当前正在运行的容器"></a>进入当前正在运行的容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通常容器都是使用后台方式运行的 ，需要进入容器，修改一些配置</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令</span><br>docker exec -it 容器id bashshell<br>[root@f434 /]# docker exec -it f133c7d76bf0 /bin/bash<br>[root@f133c7d76bf0 /]# ls<br>bin  dev  etc  home  lib  lib64  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">方式二</span><br>docker attach 容器id <br><br>[root@f434 ~]# docker attach 67c2a48052dd<br>当前正在执行的代码......<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker <span class="hljs-built_in">exec</span>       <span class="hljs-comment"># 进入容器后开启一个新的终端 ， 可以在里面执行操作</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker attach     <span class="hljs-comment"># 进入容器正在执行的终端，不会启动新的进程</span></span><br></code></pre></td></tr></table></figure><h5 id="从容器内拷贝文件到主机上"><a href="#从容器内拷贝文件到主机上" class="headerlink" title="从容器内拷贝文件到主机上"></a>从容器内拷贝文件到主机上</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker cp<br><br>[root@f434 opt]# docker cp 67c2a48052dd:/opt/test.txt /opt/<br>Successfully copied 2.05kB to /opt/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝为手动过程 ，之后使用 -v 卷的技术 ，可以实现</span><br></code></pre></td></tr></table></figure><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><blockquote><p>轻量级可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，包含代码、运行时、库、环境变量等</p></blockquote><h4 id="Docker镜像加载原理"><a href="#Docker镜像加载原理" class="headerlink" title="Docker镜像加载原理"></a>Docker镜像加载原理</h4><blockquote><p>UnionFS（联合文件系统）： 分层、轻量级并且高性能的文件系统，支持对文件系统的修改作为一次提交来一层层的叠加</p></blockquote><h4 id="commit镜像"><a href="#commit镜像" class="headerlink" title="commit镜像"></a>commit镜像</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker commit 提交容器成为一个新的副本<br>docker commit -m=&quot;描述信息&quot; -a=&quot;作者&quot; 容器id 镜像名[:TAG]<br><br><br>[root@f434 ~]# docker commit -m=&quot;testCommit&quot; -a=&quot;f434&quot; fbe4b49251ed tommcatbywebapps:1.0<br>sha256:393993e891207ffb892a5493ceaced586be0bbe69db1ad8d104c7a7807c8ce7c<br>[root@f434 ~]# docker images<br>REPOSITORY            TAG       IMAGE ID       CREATED         SIZE<br>tommcatbywebapps      1.0       393993e89120   8 seconds ago   480MB<br><br></code></pre></td></tr></table></figure><hr><h3 id="Docker-容器数据卷"><a href="#Docker-容器数据卷" class="headerlink" title="Docker 容器数据卷"></a>Docker 容器数据卷</h3><blockquote><p>目录的挂载，将我们容器内的目录，挂载到宿主机上</p><p>目的：容器的持久化和同步操作 ， 实现各容器之间数据共享</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li><p>使用命令来直接挂载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker -it -v 主机目录:容器内目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">测试 /home/test宿主机   /home容器</span><br>[root@f434 ~]# docker run -it -v /home/test:/home centos /bin/bash<br><br>[root@f434 test]# docker inspect 72e9c582a13d<br>        &quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;bind&quot;,<br>                &quot;Source&quot;: &quot;/host/test&quot;,      # 宿主机地址<br>                &quot;Destination&quot;: &quot;/home/test&quot;, # docker容器内地址<br>                &quot;Mode&quot;: &quot;&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;rprivate&quot;<br>            &#125;<br>        ],<br><br><br></code></pre></td></tr></table></figure></li></ol><h3 id="MySQL同步数据案例"><a href="#MySQL同步数据案例" class="headerlink" title="MySQL同步数据案例"></a>MySQL同步数据案例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">下载</span><br>docker pull mysql:5.7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">运行容器 , 需要做数据挂载</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-d 后台运行</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-p 端口映射</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 数据挂载</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-e 环境配置</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">--name 容器名称</span><br>[root@f434 ~]# docker run -d -p 3306:3306 -v /home/mysql/conf:/etc/mysql/conf.d \<br>-v /home/mysql/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name mmysql57 mysql:5.7<br><br></code></pre></td></tr></table></figure><h4 id="具名和匿名挂载"><a href="#具名和匿名挂载" class="headerlink" title="具名和匿名挂载"></a>具名和匿名挂载</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">匿名挂载</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-v 容器内路径</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-P 随机分配宿主机端口</span><br>docker run -d -P --name nginx01 -v /etc/nginx nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看所有卷（volume）的情况</span><br>[root@f434 data]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     43c1d4a4326bc5a74d5469068d51d1b8ca527068ace0ab87f6a0760d8867d931<br>local     261c75b7015347c2abd01543747f3941c32e16e5a44e4176166ddbfa71d8f6eb<br>local     a5d2e7339a2c75db35407a4e84dedd439724e30ee8fa76cf6697546bd6efa268<br><span class="hljs-meta prompt_"># </span><span class="language-bash">匿名挂载 ： 只写了容器内的路径 ， 没有宿主机的路径</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">具名挂载</span><br>[root@f434 data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginx<br>804a69b5a3cfc91338c4dfe1212ae33bbf5d776e1ed33ddcd1c4ff67ffef7bda<br>[root@f434 data]# docker volume ls<br>DRIVER    VOLUME NAME<br>local     juming-nginx<br>[root@f434 data]# <br></code></pre></td></tr></table></figure><p><strong>docker容器内的卷 ， 没有指定目录的情况下都在 <code>/var/lib/docker/volumes/xxxx/_data</code></strong></p><p><strong>通过具名挂载可以方便的找到一个卷 ， 大多数情况下使用具名挂载</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如何确定匿名挂载 / 具名挂载</span><br>-v 容器内路径              # 匿名挂载（/var/lib/docker/volumes/xxxxxxxxx）<br>-v 卷名:容器内路径          # 具名挂载（/var/lib/docker/volumes/卷名）<br>-v /宿主机路径:容器内路径    # 指定路径挂载<br><br></code></pre></td></tr></table></figure><p>拓展</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">通过 -v 容器内路径:ro rw 改变读写权限</span><br><br>ro readonly    只读<br>rw readwrite   读写<br><br>[root@f434 data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/ngin:ro nginx<br>[root@f434 data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ro 只要看到ro就说明这个路径下的文件只能通过宿主机来修改 ，容器内无法修改</span><br></code></pre></td></tr></table></figure><h3 id="DockerFile初识"><a href="#DockerFile初识" class="headerlink" title="DockerFile初识"></a>DockerFile初识</h3><blockquote><p>用来构建docker镜像的构建文件，命令脚本</p><p>通过这个脚本可以生成镜像，镜像是一层一层的，脚本对应一个个的命令，每个命令就是一层</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建dockerfile文件</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">文件内容 指令（大写） 参数</span><br><br>FROM centos<br><br>VOLUME [&quot;volume01&quot; , &quot;volume02&quot;]<br><br>CMD echo &quot;---------end----------&quot;<br><br>CMD /bin/bash<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">每个命令就是镜像的一层</span><br><br><br></code></pre></td></tr></table></figure><p>这种方式使用多，通常会构建自己的镜像</p><p>假设构建镜像时没有挂载卷 ， 就手动挂载卷 -v 卷名：容器内路径</p><h4 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">centos01</span><br>docker run -it --name centos01 centos<br><span class="hljs-meta prompt_"># </span><span class="language-bash">centos02</span><br>docker run -it --name centos02 --volumes-from centos01 centos<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">被继承的容器删除后 ， 其子类的数据不受影响</span><br></code></pre></td></tr></table></figure><p><strong>容器之间配置信息的传递，数据卷容器的生命周期一直持续到没有容器使用为止</strong></p><p>但一到持久化到了本地，这个时候，本地数据不会被删除</p><h3 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h3><blockquote><p>dockerfile 是用来构建docker镜像的文件，命令参数脚本</p><blockquote><p>构建步骤</p><ol><li>编写dockerfile文件</li><li><code>docker build</code> 构建成为一个镜像</li><li><code>docker run</code> 运行镜像</li><li><code>docker push</code> 发布镜像（DockerHub ， 阿里云镜像仓库）</li></ol></blockquote></blockquote><h4 id="DockerFile构建过程"><a href="#DockerFile构建过程" class="headerlink" title="DockerFile构建过程"></a>DockerFile构建过程</h4><h5 id="1-基础知识："><a href="#1-基础知识：" class="headerlink" title="1. 基础知识："></a>1. 基础知识：</h5><ol><li>保留字（指令）建议大写</li><li>从上到下顺序执行</li><li>#表示注释</li><li>每一个指令都会创建提交一个新的镜像层，并提交</li></ol><p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20230705142853575.png" alt="image-20230705142853575"></p><ol start="5"><li>dockerfile 是面向开发的，需要发布项目，做镜像就需要编写dockerfile文件，这个文件十分简单</li></ol><h4 id="DockerFile的指令"><a href="#DockerFile的指令" class="headerlink" title="DockerFile的指令"></a>DockerFile的指令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM         # 基础镜像，一切从这里开始构建<br>MAINTAINER   # 镜像作者， 姓名 + 邮箱<br>RUN          # 镜像构建时需要运行的命令<br>ADD          # 添加内容（tomcat ， mysql）<br>WORKDIR      # 镜像的工作目录<br>VOLUME # 挂载的目录<br>EPOSE        # 暴露端口<br>CMD          # 容器启动后需要运行的命令 ， 只有最后一条指令会生效 ， 可以被替代<br>ENTRYPOINT   # 容器启动后需要运行的命令，可以追加命令<br>ONBUILD      # 构建一个继承dockerfile，就会执行ONBULILD指令，属于触发指令<br>COPY         # 类似ADD，将文件拷贝到镜像中<br>ENV          # 构建的时候设置环境变量<br></code></pre></td></tr></table></figure><h4 id="尝试"><a href="#尝试" class="headerlink" title="尝试"></a>尝试</h4><ol><li><p>编写dockerfile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br><br>MAINTAINER f434&lt;3560597174@qq.com&gt;<br><br>ENV MYPATH /usr/local/src<br><br>WORKDIR $MYPATH<br><br>RUN yum install -y vim<br>RUN yum install -y net-tools<br><br>EXPOSE 80<br><br>CMD echo $MYPATH<br>CMD echo &quot;-----success--------&quot;<br>CMD /bin/bash<br></code></pre></td></tr></table></figure></li><li><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">命令 docker build -f dockerfile文件路径 -t 镜像名:[TAG]</span><br>[root@slave2 docker-test-volume]# docker build -f dockerfilebycentos -t mycentos:1 .<br>[+] Building 111.0s (8/8) FINISHED                                                                                                                                  <br> =&gt; [internal] load build definition from dockerfilebycentos                                                                                                   0.0s<br> =&gt; =&gt; transferring dockerfile: 323B                                                                                                                           0.0s<br> =&gt; [internal] load .dockerignore                                                                                                                              0.0s<br> =&gt; =&gt; transferring context: 2B                                                                                                                                0.0s<br> =&gt; [internal] load metadata for docker.io/library/centos:7                                                                                                    3.8s<br> =&gt; [1/4] FROM docker.io/library/centos:7@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4                                             16.2s<br> =&gt; =&gt; resolve docker.io/library/centos:7@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4                                              0.0s<br> =&gt; =&gt; sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d6487418ea4 1.20kB / 1.20kB                                                                 0.0s<br> =&gt; =&gt; sha256:dead07b4d8ed7e29e98de0f4504d87e8880d4347859d839686a31da35a3b532f 529B / 529B                                                                     0.0s<br> =&gt; =&gt; sha256:eeb6ee3f44bd0b5103bb561b4c16bcb82328cfe5809ab675bb17ab3a16c517c9 2.75kB / 2.75kB                                                                 0.0s<br> =&gt; =&gt; sha256:2d473b07cdd5f0912cd6f1a703352c82b512407db6b05b43f2553732b55df3bc 76.10MB / 76.10MB                                                              10.2s<br> =&gt; =&gt; extracting sha256:2d473b07cdd5f0912cd6f1a703352c82b512407db6b05b43f2553732b55df3bc                                                                      5.7s<br> =&gt; [2/4] WORKDIR /usr/local/src                                                                                                                               0.0s<br> =&gt; [3/4] RUN yum install -y vim                                                                                                                              87.3s<br> =&gt; [4/4] RUN yum install -y net-tools                                                                                                                         2.5s<br> =&gt; exporting to image                                                                                                                                         1.2s <br> =&gt; =&gt; exporting layers                                                                                                                                        1.2s <br> =&gt; =&gt; writing image sha256:c242a45ec2c48d136bb676bc13772539cced4c75747533551dc6aa8f6ed5f3c6                                                                   0.0s <br> =&gt; =&gt; naming to docker.io/library/mycentos:1    <br><br></code></pre></td></tr></table></figure></li><li><p>测试运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@slave2 docker-test-volume]# docker run -it c242a45ec2c4<br>[root@0a4b9d7785ee src]# pwd<br>/usr/local/src<br></code></pre></td></tr></table></figure></li><li><p>查看构建记录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@slave2 docker-test-volume]# docker history c242a45ec2c4<br>IMAGE          CREATED          CREATED BY                                      SIZE      COMMENT<br>c242a45ec2c4   9 minutes ago    CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;/bin/bash&quot;]                0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      9 minutes ago    CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo \&quot;-----success----…   0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      9 minutes ago    CMD [&quot;/bin/sh&quot; &quot;-c&quot; &quot;echo $MYPATH&quot;]             0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      9 minutes ago    EXPOSE map[80/tcp:&#123;&#125;]                           0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      9 minutes ago    RUN /bin/sh -c yum install -y net-tools # bu…   185MB     buildkit.dockerfile.v0<br>&lt;missing&gt;      9 minutes ago    RUN /bin/sh -c yum install -y vim # buildkit    269MB     buildkit.dockerfile.v0<br>&lt;missing&gt;      10 minutes ago   WORKDIR /usr/local/src                          0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      10 minutes ago   ENV MYPATH=/usr/local/src                       0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      10 minutes ago   MAINTAINER f434&lt;3560597174@qq.com&gt;              0B        buildkit.dockerfile.v0<br>&lt;missing&gt;      21 months ago    /bin/sh -c #(nop)  CMD [&quot;/bin/bash&quot;]            0B        <br>&lt;missing&gt;      21 months ago    /bin/sh -c #(nop)  LABEL org.label-schema.sc…   0B        <br>&lt;missing&gt;      21 months ago    /bin/sh -c #(nop) ADD file:b3ebbe8bd304723d4…   204MB    <br></code></pre></td></tr></table></figure></li></ol><h4 id="CMD-和-ENTRYPOINT的区别"><a href="#CMD-和-ENTRYPOINT的区别" class="headerlink" title="CMD 和 ENTRYPOINT的区别"></a>CMD 和 ENTRYPOINT的区别</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">CMD          # 容器启动后需要运行的命令 ， 只有最后一条指令会生效 ， 可以被替代<br>ENTRYPOINT   # 容器启动后需要运行的命令，可以追加命令<br></code></pre></td></tr></table></figure><h5 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h5><ol><li><p>CMD</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br>CMD [&quot;ls&quot; , &quot;-a&quot;]<br><br></code></pre></td></tr></table></figure><p>问题： 不能直接追加参数 ， 需要写全<code>ls -al</code></p></li><li><p>ENTRYPOINT</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br>ENTRYPOINT [&quot;ls&quot;]<br></code></pre></td></tr></table></figure><p>可动态的追加参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run centosbyentrypoint:1 -a<br></code></pre></td></tr></table></figure><h4 id="制作tomcat镜像"><a href="#制作tomcat镜像" class="headerlink" title="制作tomcat镜像"></a>制作tomcat镜像</h4><ol><li><p>镜像文件(tomcat , jdk)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@slave2 soft]# <br>[root@slave2 soft]# ll<br>total 200892<br>-rw-r--r--. 1 root root  10717836 Jul  5 04:14 apache-tomcat-8.5.90.tar.gz<br>-rw-r--r--. 1 root root 194990602 Jul  5 04:16 jdk-8u211-linux-x64.tar.gz<br><br></code></pre></td></tr></table></figure></li><li><p>编写dockerfile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">FROM centos:7<br>MAINTAINER f434&lt;2560597174@qq.com&gt;<br><br>ADD jdk-8u211-linux-x64.tar.gz /usr/local/src<br>ADD apache-tomcat-8.5.90.tar.gz /usr/local/src<br><br>RUN yum install -y vim<br><br>ENV MYPATH /usr/local/src<br>WORKDIR $MYPATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">jdk</span><br>ENV JAVA_HOME /usr/local/src/jdk1.8.0_211<br>ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tomcat</span><br>ENV CATALINA_HOME /usr/local/src/apache-tomcat-8.5.90<br>ENV CATALINA_BASH /usr/local/src/apache-tomcat-8.5.90<br><br>ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA:_HOME/bin:$CATALINA_HOME/lib<br><br>EXPOSE 8080<br><br>CMD /usr/local/src/apache-tomcat-8.5.90/bin/startup.sh &amp;&amp; tail -F /usr/lcoal/src/apache-tomcat-8.5.90/bin/logs/catalina.out<br></code></pre></td></tr></table></figure></li><li><p>构建</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@slave2 soft]# docker build -f /opt/soft/dockerfilebytomcat -t mytomcat:1 .<br>[+] Building 92.8s (10/10) FINISHED                                                                                        <br> =&gt; [internal] load .dockerignore                                                                                     0.0s<br> =&gt; =&gt; transferring context: 2B                                                                                       0.0s<br> =&gt; [internal] load build definition from dockerfilebytomcat                                                          0.0s<br> =&gt; =&gt; transferring dockerfile: 749B                                                                                  0.0s<br> =&gt; [internal] load metadata for docker.io/library/centos:7                                                           0.9s<br> =&gt; CACHED [1/5] FROM docker.io/library/centos:7@sha256:be65f488b7764ad3638f236b7b515b3678369a5124c47b8d32916d648741  0.0s<br> =&gt; [internal] load build context                                                                                     0.8s<br> =&gt; =&gt; transferring context: 205.76MB                                                                                 0.7s<br> =&gt; [2/5] ADD jdk-8u211-linux-x64.tar.gz /usr/local/src                                                               3.1s<br> =&gt; [3/5] ADD apache-tomcat-8.5.90.tar.gz /usr/local/src                                                              0.2s<br> =&gt; [4/5] RUN yum install -y vim                                                                                     86.2s<br> =&gt; [5/5] WORKDIR /usr/local/src                                                                                      0.0s<br> =&gt; exporting to image                                                                                                1.5s <br> =&gt; =&gt; exporting layers                                                                                               1.5s <br> =&gt; =&gt; writing image sha256:a34a00e6b38c0a00769499a1d8eb4d30b47649441b28ead1fb101fe7f29cf2b3                          0.0s <br> =&gt; =&gt; naming to docker.io/library/mytomcat:1  <br></code></pre></td></tr></table></figure></li><li><p>运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@slave2 soft]# docker run -it mytomcat:1<br>Using CATALINA_BASE:   /usr/local/src/apache-tomcat-8.5.90<br>Using CATALINA_HOME:   /usr/local/src/apache-tomcat-8.5.90<br>Using CATALINA_TMPDIR: /usr/local/src/apache-tomcat-8.5.90/temp<br>Using JRE_HOME:        /usr/local/src/jdk1.8.0_211<br>Using CLASSPATH:       /usr/local/src/apache-tomcat-8.5.90/bin/bootstrap.jar:/usr/local/src/apache-tomcat-8.5.90/bin/tomcat-juli.jar<br>Using CATALINA_OPTS:   <br>Tomcat started.<br>tail: cannot open &#x27;/usr/lcoal/src/apache-tomcat-8.5.90/bin/logs/catalina.out&#x27; for reading: No such file or directory<br>tail: cannot watch parent directory of &#x27;/usr/lcoal/src/apache-tomcat-8.5.90/bin/logs/catalina.out&#x27;: No such file or directory<br>tail: inotify cannot be used, reverting to polling<br><br></code></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="工具" scheme="http://example.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Vue</title>
    <link href="http://example.com/2023/05/04/Vue/"/>
    <id>http://example.com/2023/05/04/Vue/</id>
    <published>2023-05-04T10:29:01.000Z</published>
    <updated>2023-07-07T05:48:07.499Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-初识Vue"><a href="#1-初识Vue" class="headerlink" title="1. 初识Vue"></a>1. 初识Vue</h2><ul><li><p>创建Vue实例 , 且要传入一个配置对象</p></li><li><p>root容器里的代码依然符合html代码规范 , 只不过混入了一些特殊的Vue语法</p></li><li><p>root容器里的代码被称为  Vue模板 </p></li><li><p>注意：</p><ul><li>Vue实例和容器是一一对应的:</li><li>真实开发环境中只有一个Vue实例 , 且配合组件一起使用</li><li>中的XXXX要写js表达式 , 且XXXX会自动读取到data中的所有属性</li><li>一旦data中的数据发生改变 , 那么模板中用到该数据的地方也会自动更新</li></ul></li><li><p>&#96;&#96;&#96;html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>初识Vue</title><pre><code class="hljs">&lt;!-- 引入Vue --&gt;&lt;script src=&quot;../js/vue.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></pre></head><body><pre><code class="hljs">&lt;!-- 盒子容器--&gt;&lt;!-- 插值语法 --&gt;&lt;div id=&quot;root&quot;&gt;    &lt;h1&gt;hello ,&#123;&#123;name&#125;&#125;,来自&#123;&#123;address&#125;&#125; !!!&lt;/h1&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    Vue.config.productionTip = false;    // 创建Vue实例    new Vue(&#123;        // el用于指定当前Vue实例为那个容器服务 , 值通常为css选择器        el: &quot;#root&quot;,        // data用于存储数据 , 数据供el所指定的容器去使用        data: &#123;            name: &quot;张三&quot;,            address: &quot;云南&quot;        &#125;    &#125;)&lt;/script&gt;</code></pre></body></html><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">------</span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">## 2. 模板语法</span><br><span class="language-xml"></span><br><span class="language-xml">- 模板语法两大类</span><br><span class="language-xml"></span><br><span class="language-xml">  - 插值语法</span><br><span class="language-xml">    - 功能： 用于解析标签体内</span><br><span class="language-xml">    - 写法： </span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">XXXX</span>&#125;&#125;</span><span class="language-xml"> XXXX为js表达式，且可以直接读取到data中的所有属性</span><br><span class="language-xml">  - 指令语法：</span><br><span class="language-xml">    - 功能： 用于解析标签（包括标签属性 ， 标签体内容 ， 绑定事件....）</span><br><span class="language-xml">    - 举例： v-bind:href=&quot;xxx&quot; &lt;==等价==&gt; :href=&quot;xxx&quot; ， xxx同样为js表达式</span><br><span class="language-xml"></span><br><span class="language-xml">- ```html</span><br><span class="language-xml">  <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>模板语法<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-comment">&lt;!-- 容器 --&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml"> , 这是插值语法<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>指令语法<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">v-bind:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>看一看<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">          <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">:href</span>=<span class="hljs-string">&quot;url&quot;</span>&gt;</span>看一看<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span><br><span class="language-xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  </span><br><span class="language-xml">      <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">              <span class="hljs-attr">data</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://www.f434.top&quot;</span></span></span><br><span class="language-javascript"><span class="language-xml">              &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">          &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">  </span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li></ul><h2 id="3-数据绑定"><a href="#3-数据绑定" class="headerlink" title="3. 数据绑定"></a>3. 数据绑定</h2><ul><li><p>绑定数据的两种形式：</p><ul><li><p>单向绑定（v-bind）： 数据只能从data流向页面</p></li><li><p>双向数据绑定(v-model:value): 数据不仅能从data流向页面，还可以从页面流向data</p></li></ul></li><li><p>注意：</p><ul><li>双向数据绑定一般是用在表单类元素上</li><li>v-model:value &lt;&#x3D;&#x3D;等价&#x3D;&#x3D;&gt; v-model&#x3D;”” ， 因为v-model默认收集value的值</li></ul></li><li><p>&#96;&#96;&#96;html</p><!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>数据绑定</title>    <script src="../js/vue.js"></script></head><body><pre><code class="hljs">&lt;div id=&quot;root&quot;&gt;    &lt;!-- 双向绑定只能应用于表单类元素 (简化前)--&gt;    &lt;!--     单向数据绑定: &lt;input type=&quot;text&quot; v-bind:value=&quot;name&quot;&gt;&lt;br&gt;     双向数据绑定: &lt;input type=&quot;text&quot; v-model:value=&quot;name&quot;&gt;     --&gt;    &lt;!-- 双向绑定只能应用于表单类元素 (简化后)--&gt;    单向数据绑定: &lt;input type=&quot;text&quot; :value=&quot;name&quot;&gt;&lt;br&gt;         双向数据绑定: &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    new Vue(&#123;        el: &quot;#root&quot;,        data: &#123;            name: &#39;zhangsan&#39;        &#125;    &#125;)&lt;/script&gt;</code></pre></body></html><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br><br><br>## <span class="hljs-number">4</span>. <span class="hljs-keyword">el</span>&amp;data的两种写法<br><br><span class="hljs-number">1</span>. <span class="hljs-keyword">el</span>的两种写法<br><br>   - <span class="hljs-keyword">new</span> Vue的时候配置<span class="hljs-keyword">el</span>属性<br><br>     ```js<br>     const v = <span class="hljs-keyword">new</span> Vue(&#123;<br>         <span class="hljs-keyword">el</span>: <span class="hljs-string">&quot;#root&quot;</span>, // 第一种<br>         data: &#123;<br>             name: <span class="hljs-string">&quot;张三&quot;</span><br>         &#125;<br>     &#125;)<br>     <br>     <br></code></pre></td></tr></table></figure><ul><li><p>先创建Vue实例，随后通过v.$mount(‘#root’)指定el的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>const v = new Vue(&#123;<br>    data: &#123;<br>        name: &quot;张三&quot;<br>    &#125;<br>&#125;)<br>v.$mount(&quot;#root&quot;); // 第二种写法<br></code></pre></td></tr></table></figure></li></ul></li></ul><ol start="2"><li><p>data的两种写法</p><ul><li><p>对象式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#root&quot;</span>,<br>    <span class="hljs-comment">//data的第一种写法 : 对象式</span><br>    <span class="hljs-attr">data</span>: &#123; <br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;张三&quot;</span>,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure></li><li><p>函数式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#root&quot;</span>,<br>    <span class="hljs-comment">//data的第一种写法 : 函数式</span><br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;李四&#x27;</span>,<br>        &#125;<br>&#125;<br><br>&#125;)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>注意：</p><ul><li>组件开发时， data必须使用函数式，否则会报错</li><li>由Vue管理的函数，不能使用箭头函数，一旦写成箭头函数，this所指代的实例则是window</li></ul></li></ol><h2 id="5-MVVM模型"><a href="#5-MVVM模型" class="headerlink" title="5. MVVM模型"></a>5. MVVM模型</h2><ol><li>MVVM模型<ul><li>M:模型（model）:  data中的数据</li><li>V：视图（View）：模板代码</li><li>VM：视图模型（ViewModel）： Vue实例</li></ul></li><li>注意：<ul><li>data中所有的属性，最后都会出现在vm身上</li><li>vm身上所有的属性及vue原型上所有的属性，在vue模板中都可以直接使用</li></ul></li></ol><h2 id="6-数据代理"><a href="#6-数据代理" class="headerlink" title="6. 数据代理"></a>6. 数据代理</h2><ol><li><p><code>Object.defineProperty</code>方法</p><blockquote><p>直接在一个对象上定义一个新属性，或修改其现有属性，并返回此对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span>;<br>        <span class="hljs-keyword">let</span> person = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,<br>            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;男&#x27;</span><br>        &#125;<br><br>        <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(person, <span class="hljs-string">&#x27;age&#x27;</span>, &#123;<br>            <span class="hljs-attr">value</span>:<span class="hljs-number">20</span>,<br><br>        &#125;)<br><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(person)<br> &lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>什么是数据代理：通过一个对象代理 对另一个对象中的属性进行操作(读&#x2F; 写)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    <span class="hljs-keyword">let</span> obj1 = &#123;<br>        <span class="hljs-attr">x</span>: <span class="hljs-number">100</span><br>    &#125;<br><span class="hljs-keyword">let</span> obj2 = &#123;<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">200</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj2, <span class="hljs-string">&#x27;x&#x27;</span>, &#123;<br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> obj1.<span class="hljs-property">x</span><br>    &#125;,<br>    <span class="hljs-title function_">set</span>(<span class="hljs-params">value</span>) &#123;<br>        obj1.<span class="hljs-property">x</span> = value;<br>    &#125;<br>&#125;)<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>Vue中的数据代理</p><ol><li>定义： <ul><li>通过VM对象来代理data对象中属性的读写操作</li></ul></li><li>数据代理的好处：<ul><li>更加方便的操作data中的数据</li></ul></li><li>基本原理<ul><li>通过<code>Object.defineProperty()</code>把data对象中所有属性添加到vm上</li><li>为每一个添加到vm身上的都指定一个getter和setter</li><li>在getter&#x2F;setter内部去进行读写操作data中对应的属性</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Vue中的数据代理<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 等效于 &#123;&#123;_data.name&#125;&#125; --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学校名称&#123;&#123;name&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>学校地址&#123;&#123;address&#125;&#125; <span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-comment">// 通过 Object.defineProperty来实现数据绑定</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;农职&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;云南&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="7-事件处理"><a href="#7-事件处理" class="headerlink" title="7. 事件处理"></a>7. 事件处理</h2><ol><li><p>事件的基本使用</p><ul><li><p>使用<code>v-on:xxx</code>或@xxx 绑定事件，其中xxx是事件名</p></li><li><p>事件的回调需要配置在methods对象中，最终会出现在vm身上</p></li><li><p>methods中配置的函数，不要使用箭头函数，否则this指向window</p></li><li><p>methods中配置的函数，都是被vue所管理的函数，this的指向是vm或者实例对象</p></li><li><p>@click&#x3D;”demmo” 和 @click&#x3D;”demo($event)” 效果一致 , 但后者可以传参,传参方式为括号加参数</p></li></ul><blockquote><p>$event  获取到该事件的事件对象</p></blockquote><ul><li>&#96;&#96;&#96;html<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <title>Document</title></head><script src="../js/vue.js"></script>    <body>    <div id="root"><pre><code class="hljs">    &lt;h1&gt;欢迎&#123;&#123;name&#125;&#125;&lt;/h1&gt;    &lt;!-- 点击后执行方法 --&gt;    &lt;button v-on:click=&quot;showInfo1&quot;&gt;点击提示信息1(不传参)&lt;/button&gt;    &lt;button @click=&quot;showInfo2(66 , $event)&quot;&gt;点击提示信息2(传参)&lt;/button&gt;&lt;/div&gt;</code></pre></body><script>Vue.config.productionTip = false // 阻止启动时产生的生产提示const vm = new Vue({    el:'#root',    data() {        return {            name: '张三',        };    },    methods: {        // Vue管理的函数不能使用箭头函数 , 否则该this是window        showInfo1(event){            // console.log(this)  此处的this 是 vm            // console.log(event.target.innerText)获取事件发生的目标(即按钮)的文本            alert('同学你好')        },        showInfo2(number , event){            // console.log(this)  此处的this 是 vm            alert('同学你好!!!')            console.log(number ,event)        }    },})</script></html><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"></span><br><span class="language-xml">2. 事件修饰符</span><br><span class="language-xml"></span><br><span class="language-xml">   - | 修饰名  | 作用                                                   |</span><br><span class="language-xml">     | ------- | ------------------------------------------------------ |</span><br><span class="language-xml">     | prevent | 阻止默认事件                                           |</span><br><span class="language-xml">     | stop    | 阻止事件冒泡                                           |</span><br><span class="language-xml">     | once    | 事件只触发一次                                         |</span><br><span class="language-xml">     | capture | 使用事件的捕获模式                                     |</span><br><span class="language-xml">     | self    | 只有event.target是当前操作的元素时才触发事件（myself） |</span><br><span class="language-xml">     | passive | 事件的默认行为立即执行，无需等待事件回调执行完毕       |</span><br><span class="language-xml"></span><br><span class="language-xml">   - 补充：</span><br><span class="language-xml"></span><br><span class="language-xml">     - 事件冒泡</span><br><span class="language-xml">       -  DOM事件流（event  flow ）存在三个阶段：事件捕获阶段、处于目标阶段、事件冒泡阶段。</span><br><span class="language-xml">       - 事件捕获（event  capturing）：通俗的理解就是，当鼠标点击或者触发dom事件时，浏览器会从根节点开始由外到内进行事件传播，即点击了子元素，如果父元素通过事件捕获方式注册了对应的事件的话，会先触发父元素绑定的事件。</span><br><span class="language-xml">       - 事件冒泡（dubbed  bubbling）：与事件捕获恰恰相反，事件冒泡顺序是由内到外进行事件传播，直到根节点。</span><br><span class="language-xml">       - dom标准事件流的触发的先后顺序为：先捕获再冒泡，即当触发dom事件时，会先进行事件捕获，捕获到事件源之后通过事件传播进行事件冒泡。不同的浏览器对此有着不同的实现，IE10及以下不支持捕获型事件，所以就少了一个事件捕获阶段，IE11、Chrome 、Firefox、Safari等浏览器则同时存在</span><br><span class="language-xml">       - 捕获由外向内 , 冒泡由内向外</span><br><span class="language-xml"></span><br><span class="language-xml">   - ```html</span><br><span class="language-xml">     <span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="language-css"><span class="language-xml">             *&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">20px</span>;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">     </span></span><br><span class="language-css"><span class="language-xml">             <span class="hljs-selector-class">.demo1</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">background-color</span>: bisque;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">     </span></span><br><span class="language-css"><span class="language-xml">     </span></span><br><span class="language-css"><span class="language-xml">             <span class="hljs-selector-class">.box1</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">background-color</span>: aquamarine;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">             <span class="hljs-selector-class">.box2</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span>;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">background-color</span>: antiquewhite;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">     </span></span><br><span class="language-css"><span class="language-xml">             <span class="hljs-selector-class">.list</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">height</span>: <span class="hljs-number">200px</span>;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">background-color</span>: aqua;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">overflow</span>: auto;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">             <span class="hljs-selector-tag">li</span>&#123;</span></span><br><span class="language-css"><span class="language-xml">                 <span class="hljs-attribute">height</span>: <span class="hljs-number">100px</span>;</span></span><br><span class="language-css"><span class="language-xml">             &#125;</span></span><br><span class="language-css"><span class="language-xml">         </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">     </span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;root&quot;</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎</span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">name</span>&#125;&#125;</span><span class="language-xml">同学<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- prevent : 阻止默认事件 --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://www.f434.top&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">             </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- stop : 阻止事件冒泡 --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- once : 事件只触发一次 --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点击提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- capture : 使用事件的捕获模式 --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box1&quot;</span> @<span class="hljs-attr">click.capture</span>=<span class="hljs-string">&quot;showMsg(&#x27;div1&#x27;)&quot;</span>&gt;</span></span><br><span class="language-xml">                 div1</span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;box2&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showMsg(&#x27;div2&#x27;)&quot;</span>&gt;</span></span><br><span class="language-xml">                     div2</span><br><span class="language-xml">     </span><br><span class="language-xml">                 <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- self : 只有event.target 是当前操作的元素时才触发事件  --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;demo1&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;showInfo&quot;</span>&gt;</span>点此提示信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">     </span><br><span class="language-xml">             <span class="hljs-comment">&lt;!-- passive : 时间的默认行为立即执行,无需等待事件回调执行完毕 --&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> @<span class="hljs-attr">wheel.passive</span>=<span class="hljs-string">&quot;demo&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;list&quot;</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">                 <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>4<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">             <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">     </span><br><span class="language-xml">     </span><br><span class="language-xml">         </span><br><span class="language-xml">         <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">     </span><br><span class="language-xml">         <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">     </span></span><br><span class="language-javascript"><span class="language-xml">             <span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span>;</span></span><br><span class="language-javascript"><span class="language-xml">     </span></span><br><span class="language-javascript"><span class="language-xml">             <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                 <span class="hljs-attr">el</span>:<span class="hljs-string">&quot;#root&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                 <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                     <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;张三&#x27;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">                     &#125;;</span></span><br><span class="language-javascript"><span class="language-xml">                 &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                 <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                     <span class="hljs-title function_">showInfo</span>(<span class="hljs-params">event</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-comment">// 阻止默认行为(阻止跳转)</span></span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-comment">// event.preventDefault();</span></span></span><br><span class="language-javascript"><span class="language-xml">     </span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-comment">// 阻止事件冒泡</span></span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-comment">// event.stopPropagation();</span></span></span><br><span class="language-javascript"><span class="language-xml">                         </span></span><br><span class="language-javascript"><span class="language-xml">                         </span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;同学你好!!!&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(event.<span class="hljs-property">target</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                     &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                     <span class="hljs-title function_">showMsg</span>(<span class="hljs-params">msg</span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg)</span></span><br><span class="language-javascript"><span class="language-xml">                     &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">                     <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;</span></span><br><span class="language-javascript"><span class="language-xml">                         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100000</span>; i++) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">                             <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;@&quot;</span>)</span></span><br><span class="language-javascript"><span class="language-xml">                             </span></span><br><span class="language-javascript"><span class="language-xml">                         &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                     &#125;</span></span><br><span class="language-javascript"><span class="language-xml">                 &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">             &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">         </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">     <span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">     </span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>键盘事件</p><ul><li><p>常用案件别名</p><table><thead><tr><th>键名</th><th>别名</th></tr></thead><tbody><tr><td>回车</td><td>enter</td></tr><tr><td>删除</td><td>delete（捕获删除和退格键）</td></tr><tr><td>退出</td><td>esc</td></tr><tr><td>空格</td><td>space</td></tr><tr><td>换行</td><td>tab（必须配合）@keydown.tab&#x3D;”XXXX”</td></tr><tr><td>上</td><td>up</td></tr><tr><td>下</td><td>down</td></tr><tr><td>左</td><td>left</td></tr><tr><td>右</td><td>right</td></tr></tbody></table></li><li><p>Vue未提供别名的按键，可以使用按键原始的key值去绑定，但注意要转化为kebab-case（短横线命名），例如CapsLock 写成caps-lock @keyUp.caps-lock&#x3D;”XXXX”</p></li><li><p>系统修饰键（特殊）： ctrl 、alt 、 shift 、 meta</p><ul><li>配合keyUp使用：按下修饰键的同时,再按下其他键 , 随后释放其他键 , 事件才会被触发</li><li>配合keydown使用: 正常触发事件</li></ul></li><li><p>也可以使用keyCode去指定具体的按键(不推荐)</p></li><li><p>Vue.config.keyCodes.自定义键名 &#x3D; 键码 , 可以去定制按键别名</p></li><li><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;    &lt;div id=&quot;root&quot;&gt;        &lt;h1&gt;欢迎&#123;&#123;name&#125;&#125;同学&lt;/h1&gt;        &lt;input type=&quot;text&quot; name=&quot;&quot; id=&quot;&quot; placeholder=&quot;按下回车提示输入&quot; @keyUp.ctrl.y=&quot;showInfo&quot;&gt;    &lt;/div&gt;    &lt;script&gt;        Vue.config.productionTip = false; //关闭生产提醒        Vue.config.keyCodes.huiche = 13;  //自定义别名按键        new Vue (&#123;            el : &quot;#root&quot;,            data() &#123;                return &#123;                    name: &#39;张三&#39;,                &#125;;            &#125;,            methods: &#123;                showInfo(e)&#123;                    // console.log(e)                    // target 事件属性返回触发事件的元素。                    // console.log(e.target.value)                    // 获取按键编码                    // console.log(e.keyCode)                    // if (e.keyCode !== 13) return                    console.log(e.target.value)                    console.log(&#39;键名:&#39; + e.key  +&#39;   &#39; + &#39;键值:&#39; + e.keyCode)                &#125;,            &#125;,          &#125;)    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li></ul><h2 id="8-计算属性"><a href="#8-计算属性" class="headerlink" title="8. 计算属性"></a>8. 计算属性</h2></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Spring6入门</title>
    <link href="http://example.com/2023/02/22/Spring6%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/02/22/Spring6%E5%85%A5%E9%97%A8/</id>
    <published>2023-02-22T13:44:48.000Z</published>
    <updated>2023-02-22T13:54:41.110Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Spring6"><a href="#Spring6" class="headerlink" title="Spring6"></a>Spring6</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><h6 id="1-什么是Spring"><a href="#1-什么是Spring" class="headerlink" title="1. 什么是Spring?"></a>1. 什么是Spring?</h6><p>   是一款主流的Java EE 轻量级开源框架 , Spring由”Spring之父”Rod Johnson 提出并创立 , 目的用于简化Java企业级应用的开发难度和开发周期, Spring的用途不仅限于服务器端的开发.从简单性,可测试性和松耦合的角度而言,任何Java应用都可以从Spring中收益.Spring框架除了自己提供功能外,还提供整合其他技术和框架的能力</p><h6 id="2-Spring的广义狭义"><a href="#2-Spring的广义狭义" class="headerlink" title="2. Spring的广义狭义"></a>2. Spring的广义狭义</h6><ul><li>广义Spring : Spring技术栈<ul><li>泛指以Spring Framework为核心的Spring技术栈</li><li>经过十多年的发展,Spring已经不再是一个单纯的应用框架,而是逐渐发展成了一个人有多个不同子项目(模块)组成的成熟技术,l例如 Spring Framework , Spring MVC , Spring Boot , Spring Cloud , Spring Data , Spring Security等 , 其中Spring Framework是其他子项目的基础</li><li>这些子项目涵盖了从企业级警用开发到云计算等各方面的内容, 能够帮助开发人员解决软件发展过程中不断产生的各种实际问题,从而带来更好的开发体验</li></ul></li><li>狭义的Spring : Spring Framework<ul><li>狭义Spring 特指: Spring Framework , 通常称为Spring框架</li><li>Spring 框架是一个分层的 , 面向切面的Java应用程序的一站式轻量解决方案 , 他是Spring技术的核心和基础 , 是为了解决企业级应用开发的复杂性而创建的.</li><li>Spring 两个核心模块<ul><li>IOC : Inverse of Control 的简写 , 译为”控制反转” , 指把创建对象的过程交给Spring来管理</li><li>AOP : Aspect Oriented Programming 的简写 , 译为”面向切面编程” . AOP用来封装多个类的公共行为 , 将那些与业务无关,却为业务模块所共同调用的逻辑封装起来 ,减少系统的重复代码 , 降低系统之间的耦合度 , 另外,AOP还解决一些系统层面的问题 , 比如日志 , 事务, 权限等.</li></ul></li></ul></li></ul><h6 id="3-Spring-Framework特点"><a href="#3-Spring-Framework特点" class="headerlink" title="3. Spring Framework特点"></a>3. Spring Framework特点</h6><ul><li>非侵入式 : Spring 对应用程序本身的结构影响非常小. 对领域模型可以做到零污染; 对功能性组件也只需要使用几个简单的注解进行标记 , 完全不坏原有结构 , 反而能将组件结构进一步简化 , 这就使得基于Spring Framework 开发的应用程序结构清晰 , 简洁优雅</li><li>控制反转 : IoC ,把自己创建资源,向环境索取资源变成环境将资源准备好, 我们享受资源注入</li><li>面向切面编程 : AOP , 在不修改源代码的基础上增强代码功能</li><li>容器 : Spring IoC 是一个容器 , 因为它包含并且管理组件对象的生命周期.组件享受到了容器化的管理, 替代程序员屏蔽了组件创建中大量细节 , 极大降低了使用门槛 , 大幅度提高开发效率</li><li>组件化 : Spring实现了使用简单组件配置组合成一个复杂的应用 , 在Spring中可以使用XML 和Java 注解组合这些对象,这使得我们可以基于一个个功能明确,边界清晰的组件有条不紊的搭建超大型复杂应用系统.</li><li>一站式: 在IoC 和 AOP的基础上可以整合各种企业应用的开源框架和优秀的第三方类库 ,Spring旗下项目已经覆盖了广泛领域 , 很多方面的功能性需求可以在Spring Framework 的基础上全部使用Spring 来实现</li></ul><h6 id="4-Spring模块组成"><a href="#4-Spring模块组成" class="headerlink" title="4. Spring模块组成"></a>4. Spring模块组成</h6><ul><li><p>Spring Core (核心容器)</p><blockquote><p>提供了IoC ,DI , Bean配置装载创建的核心实现. 核心概念: Beans、BeanFactory、BeanDefinitions、ApplicationContext</p><blockquote><p>Spring-core : IoC 和 DI的基本实现</p><p>Spring-beans : BeanFactory和Bean的装配管理(BeanFactory)</p><p>spring-context : Spring context上下文 , 即IoC容器(ApplicationContext)</p><p>spring-expression : spring 表达式语言</p></blockquote></blockquote></li><li><p>Spring AOP</p><ul><li>spring-aop : 面向切面编程的应用模块 , 整合 ASM , CGLIB , JDK Proxy</li><li>spring-aspects : 集成 AspectJ , AOP应用框架</li><li>spring-instrument : 动态Class Loding 模块</li></ul></li><li><p>Spring Data Access</p><ul><li>spring-jdbc : spring对JDBC的封装 , 用于简化jdbc操作</li><li>spring-orm : java对象与数据库数据的映射框架</li><li>spring-oxm : 对象与XML文件的映射框架</li><li>spring-jms : Spring 对Java Message Services(Java消息服务)的封装 , 用于服务之间的相互通信</li><li>spring-tx : spring jdbc事务管理</li></ul></li><li><p>Spring Web</p><ul><li>spring-web : 最基础的Web支持, 建立于spring-context 之上 , 通过servlet或listener来初始化IOC容器</li><li>spring-webmvc : 实现web mvc</li><li>spring-websocket : 与前端的全双工通信协议</li><li>spring-webflux : spring5.0提供 , 用于取传统java servlet ,非阻塞式Reactive Web 框架, 异步, 非阻塞 , 事件驱动的服务</li></ul></li><li><p>Spring Messege</p><ul><li>spring-messaging : spring 4.0 提供, 为spring继承一些基础的报文传送服务</li></ul></li><li><p>Spring Test</p><ul><li>spring-test : 集成测试支持 , 主要是对junit 的封装</li></ul></li></ul><h6 id="5-Spring6要求JDK版本最低17"><a href="#5-Spring6要求JDK版本最低17" class="headerlink" title="5. Spring6要求JDK版本最低17"></a>5. Spring6要求JDK版本最低17</h6><h3 id="2-入门"><a href="#2-入门" class="headerlink" title="2. 入门"></a>2. 入门</h3><h6 id="1-程序开发"><a href="#1-程序开发" class="headerlink" title="1. 程序开发"></a>1. 程序开发</h6><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--spring context依赖--&gt;</span><br>    <span class="hljs-comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--junit5测试--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.jupiter<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-jupiter-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建java类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.f434.spring6.bean;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建配置文件</p><blockquote><p>在resources目录创建一个 Spring 配置文件 xxx.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">beans</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    配置HelloWorld所对应的bean，即将HelloWorld的对象交给Spring的IOC容器管理</span><br><span class="hljs-comment">    通过bean标签配置IOC容器所管理的bean</span><br><span class="hljs-comment">    属性：</span><br><span class="hljs-comment">        id：设置bean的唯一标识</span><br><span class="hljs-comment">        class：设置bean所对应类型的全类名</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;helloWorld&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.f434.spring6.bean.HelloWorld&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">beans</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建测试类测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.f434.spring6.bean;<br><br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<br><span class="hljs-keyword">import</span> org.springframework.context.ApplicationContext;<br><span class="hljs-keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorldTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHelloWorld</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassPathXmlApplicationContext</span>(<span class="hljs-string">&quot;beans.xml&quot;</span>);<br>        <span class="hljs-type">HelloWorld</span> <span class="hljs-variable">helloworld</span> <span class="hljs-operator">=</span> (HelloWorld) ac.getBean(<span class="hljs-string">&quot;helloWorld&quot;</span>);<br>        helloworld.sayHello();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>程序分析</p><ul><li>创建对象时调用个无参构造</li><li>通过反射机制用无参数构造方法创建对象</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot快速上手</title>
    <link href="http://example.com/2023/02/20/SpringBoot%E5%88%9D%E8%AF%86/"/>
    <id>http://example.com/2023/02/20/SpringBoot%E5%88%9D%E8%AF%86/</id>
    <published>2023-02-20T09:08:03.000Z</published>
    <updated>2023-03-30T12:52:56.899Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="SpringBoot快速上手"><a href="#SpringBoot快速上手" class="headerlink" title="SpringBoot快速上手"></a>SpringBoot快速上手</h3><h5 id="springboot-介绍"><a href="#springboot-介绍" class="headerlink" title="springboot 介绍"></a>springboot 介绍</h5><ul><li><p>springboot是由pivotal团队提供的基于spring的全新框架 , 旨在简化spring应用的初始搭建和开发过程</p></li><li><p>springboot 是所有基于spring开发项目的起点</p></li><li><p>尽可能简化应用开发的门槛 , 让应用开发,测试, 部署变得更加简单</p></li></ul><h5 id="SpringBoot特点"><a href="#SpringBoot特点" class="headerlink" title="SpringBoot特点"></a>SpringBoot特点</h5><ul><li>遵循约定优于配置 的原则 , 只需要很少的配置或使用默认的配置</li><li>能够使用内嵌的Tomcat jetty服务器 , 不需要部署war文件</li><li>提供定制化的启动器starters , 简化Maven配置</li><li>纯java配置,没有代码生成 , 也不需要xml配置</li><li>提供了生产级的服务监控方案 , 如安全监控 , 应用监控 , 健康检测等</li></ul><h5 id="开发环境热部署"><a href="#开发环境热部署" class="headerlink" title="开发环境热部署"></a>开发环境热部署</h5><ul><li><p>springboot提供了spring-boot-devtools组件,使得无需手动重启springboot应用即可重新编译 , 启动项目 , 从而缩短启动时间</p></li><li><p>devtools会监听classpath下的文件变动 , 触发restart类加载器重新加载该类 , 从而实现类文件和属性文件的热部署</p></li><li><p>并不是所有的更改都需要重启应用(例如静态资源 , 视图模板) , 可通过设置spring.devtools.restart.exclude属性来指定一些文件或目录的修改不用重启应用</p></li><li><p>使用</p><ul><li><p>添加dev-tools依赖</p><blockquote><p>optional&#x3D;true , 表示依赖不会传递,及该项目依赖devtools,其他项目引用此项目生成的jar包不包含devtools</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在application.properties中配置devtools</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 开启热部署</span><br><span class="hljs-attr">spring.devtools.restart.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-comment"># 设置重启目录</span><br><span class="hljs-attr">spring.devtools.restart.additional-paths</span>=<span class="hljs-string">src/main/java</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="SpringBoot-Controller"><a href="#SpringBoot-Controller" class="headerlink" title="SpringBoot Controller"></a>SpringBoot Controller</h3><h5 id="web入门"><a href="#web入门" class="headerlink" title="web入门"></a>web入门</h5><ul><li>springboot将传统的web开发的mvc json tomcat等框架整合 , 提供了spring-boot-starter-web组件,简化了web应用配置</li><li>创建springboot项目勾选spring web选项后 , 会自动将spring-boot-starter-web组件加入到项目当中</li><li>spring-boot-starter-web启动器主要包括web webmvc json tomcat等基础依赖组件,提供web开发场景所需的所有底层依赖</li><li>webmvc为web开发的基础框架 , json为JSON数据解析组件 , tomcat为自带的容器依赖</li></ul><h5 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h5><ul><li>springboot提供@Controller和@RestController两种注解来标识此类负责接收和处理HTTP请求</li><li>如果请求的是页面和数据 , 使用@Controller注解即可, 如果只是请求数据,则可以使用@RestController</li><li>@RestController 用法<ul><li>默认情况下 ,@RestController注解会将返回的对象数据转换为JSON格式</li></ul></li></ul><h5 id="路由映射"><a href="#路由映射" class="headerlink" title="路由映射"></a>路由映射</h5><ul><li><p>@RequestMapping注解主要负责URL的路由映射 , 他可以添加在Controller类或者具体的方法上</p></li><li><p>若果添加在Controller类上 , 则这个Controller中的所有路由映射都将会加上此映射规则 , 如果添加在方法上,则指对当前方法生效</p></li><li><p>@RequestMapping注解包含很多属性参数来定义HTTP的请求映射规则.常用的属性参数如下</p><ul><li>value : 请求URL的路径 , 支持URL模板 , 正则表达式</li><li>method : HTTP请求方法</li><li>consumes : 请求的媒体类型(Content-Type) , 如application&#x2F;json</li><li>produces : 响应的媒体类型</li><li>params , headers : 请求的参数及请求头的值</li></ul><h5 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h5><ul><li>@RequestParam将请求参数绑定到控制器的方法参数上,接收的参数来自HTTP请求体或请求url的QueryString , 当请求的参数名称与Controller的业务方法参数名称一致时,@RequestParam可以省略</li><li>@PathVaraible: 用来处理动态的URL , URL的值可以作为控制器中处理方法的参数</li><li>@RequestBody接收的参数是来自requestBody中 , 及请求体 , 一班用于处理非Content-Type&#x2F;x-www-from-urlencode编码格式的数据 . 比如application&#x2F;json , application&#x2F;xml等类型的数据</li></ul></li></ul><h3 id="SpringBoot-文件上传-拦截器"><a href="#SpringBoot-文件上传-拦截器" class="headerlink" title="SpringBoot 文件上传 + 拦截器"></a>SpringBoot 文件上传 + 拦截器</h3><h5 id="静态资源访问"><a href="#静态资源访问" class="headerlink" title="静态资源访问"></a>静态资源访问</h5><ul><li><p>idea创建SpringBoot 项目,会默认创建出classpath:&#x2F;static&#x2F;目录,静态资源一般放在这个目录下即可</p></li><li><p>如果默认的静态资源过滤策略不能满足开发需求 , 可以自定义静态资源过滤策略</p></li><li><p>在application.properties中配置如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 定义静态资源的加载位置</span><br><span class="hljs-attr">spring.mvc.static-path-pattern</span>=<span class="hljs-string">/img/**</span><br></code></pre></td></tr></table></figure></li></ul><h5 id="springboot实现文件上传"><a href="#springboot实现文件上传" class="headerlink" title="springboot实现文件上传"></a>springboot实现文件上传</h5><blockquote><p>实现上传的文件可以被访问需更改静态资源加载位置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 第一个斜线代表的是服务器所在的路径</span><br><span class="hljs-attr">spring.web.resources.static-locations</span>=<span class="hljs-string">/upload/</span><br></code></pre></td></tr></table></figure></blockquote><ul><li><p>内嵌的tomcat限制了请求文件的大小 ,默认每个文件最大为1MB , 单次请求文件总数不大于10MB</p></li><li><p>需要更改可在application.properties中配置如下</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">spring.servlet.multipart.max-request-size</span>=<span class="hljs-string">10MB</span><br><span class="hljs-attr">spring.servlet.multipart.max-file-size</span>=<span class="hljs-string">10MB</span><br></code></pre></td></tr></table></figure></li><li><p>当表单的enctype&#x3D;”multipart&#x2F;from-data”时,可以使用MultipartFile获取上传的文件数据 , 再通过transferTo方法将其写入到磁盘中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hellworld.controller;<br><br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.multipart.MultipartFile;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileController</span> &#123;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">up</span><span class="hljs-params">(String name , MultipartFile multipartFile , HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        System.out.println(name);<br>        <span class="hljs-comment">//获取上传文件的原始名称</span><br>        System.out.println(multipartFile.getOriginalFilename());<br><br>        <span class="hljs-comment">//获取文件类型</span><br>        System.out.println(multipartFile.getContentType());<br><br><br>        <span class="hljs-comment">//动态获取服务器下upload的绝对路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getServletContext().getRealPath(<span class="hljs-string">&quot;/upload/&quot;</span>);<br>        System.out.println(path);<br>        saveFile(multipartFile , path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveFile</span><span class="hljs-params">(MultipartFile multipartFile , String path)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//判断目录 , 不存在则创建</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br>        <span class="hljs-keyword">if</span> (!dir.exists())&#123;<br>            <span class="hljs-comment">//创建目录</span><br>            dir.mkdir();<br>        &#125;<br><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + multipartFile.getOriginalFilename());<br>        multipartFile.transferTo(file);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h4 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h4><ul><li><p>拦截器在web系统中非常常见 , 对于某些全局统一的操作 , 我们可以把它提取到拦截器中实现</p></li><li><p>使用场景</p><ul><li><p>权限检查:如登陆检测,进入处理程序检测是否登录 , 如果没有,则直接返回登陆界面</p></li><li><p>性能监控: 有时系统在某时间段莫名其妙很慢,可以通过拦截器在进入处理程序之前记录开始时间,在处理完后记录结束时间,从而得到该请求的处理时间</p></li><li><p>通用行为: 读取cookie得到用户信息并将用户对象放入请求,从而方便后续流程使用 , 还有提取Locale Theme信息等 , 只要是多个处理程序都需要的,即可使用拦截器实现</p></li><li><p>spring boot 定义了HandlerInterceptor接口来实现自定义拦截器功能</p></li><li><p>HandlerInterceptor接口定义了preHandle , postHandle afterCompletion三种方法 , 通过重写这三种方法实现请求前, 请求后等操作</p></li></ul></li><li><p>具体使用</p><ul><li><p>定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hellworld.interceptor;<br><br><span class="hljs-keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginInterCeptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <br>        <span class="hljs-comment">//可做条件判断</span><br>        System.out.println(<span class="hljs-string">&quot;LoginInterCeptor&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>配置拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hellworld.config;<br><br><br><span class="hljs-keyword">import</span> com.example.hellworld.interceptor.LoginInterCeptor;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;<br>        <span class="hljs-comment">// addPathPatterns(&quot;/user/**&quot;) 拦截指定路径下的请求</span><br>        <span class="hljs-comment">//不加则拦截所有</span><br><br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginInterCeptor</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="构建RESTful服务-Swagger"><a href="#构建RESTful服务-Swagger" class="headerlink" title="构建RESTful服务 + Swagger"></a>构建RESTful服务 + Swagger</h2><h5 id="RESTful服务介绍"><a href="#RESTful服务介绍" class="headerlink" title="RESTful服务介绍"></a>RESTful服务介绍</h5><ul><li>RESTful是目前流行的互联网软件服务架构设计风格</li><li>全称是Representational State Transfer，中文意思是表述（编者注：通常译为表征）性状态转移。定义了互联网软件架构的原则</li><li>REST并不是一个标准,更像一组客户端和服务端交互时的架构理念和设计原则,基于这种架构理念和设计原则的Web API更加简洁 ,更有层次</li></ul><h5 id="RESTful特点"><a href="#RESTful特点" class="headerlink" title="RESTful特点"></a>RESTful特点</h5><ul><li>每个URL都代表一个资源</li><li>客户端使用get post put delete 四种表示操作方式的动词对服务资源进行操作:<ul><li>get用于获取资源</li><li>post用于新建资源(也可用于更新资源)</li><li>put用于更新资源</li><li>delete用于删除资源</li></ul></li><li>通过操作资源的表现形式来实现服务端请求操作</li><li>资源的表现形式JSON或者HTML</li><li>客户端与服务端之间的交互在请求之间是无状态的,从客户端到服务端的每个请求都包含必须的信息</li></ul><h5 id="RESTful-API"><a href="#RESTful-API" class="headerlink" title="RESTful API"></a>RESTful API</h5><ul><li>两个关键特性:<ul><li>安全性: 安全的方法被期望不会产生任何副作用,当我们使用get操作获取资源时,不会引起资源本身的改变,也不会引起服务器状态的改变</li><li>幂等性:幂等的方法保证了重复进行一个请求和多次请求的效果相同(并不是指响应总是相同的,而是指服务器上资源的状态从第一次请求后就不再改变),在数学上幂等性是指N次变换和一次变换相同</li></ul></li></ul><h5 id="HTTP-Method"><a href="#HTTP-Method" class="headerlink" title="HTTP Method"></a>HTTP Method</h5><ul><li><p>http提供了post get put delete 等操作类型对某个Web资源进行create , read update和delete操作</p></li><li><p>一个http请求除了利用URL标志目标资源外,还需要通过HTTP Method指定针对该资源的操作类型,常见的HTTP方法及其在RESTful风格下的使用</p><table><thead><tr><th>HTTP方法</th><th>操作</th><th>返回值</th><th>特定返回值</th></tr></thead><tbody><tr><td>POST</td><td>Create</td><td>201(Created),提交或保存资源</td><td>404(Not Found),409(Conflict)资源已存在</td></tr><tr><td>GET</td><td>Read</td><td>200(OK),获取资源或数据列表,支持分页,排序,条件查询</td><td>200(OK)返回资源404(Not Found)资源不存在</td></tr><tr><td>PUT</td><td></td><td>200 &#x2F; 204</td><td>404 &#x2F; 405 (禁止使用该方法调用)</td></tr><tr><td>PATCH</td><td></td><td>200 &#x2F; 204</td><td>404</td></tr><tr><td>DELETE</td><td></td><td>200</td><td>404 &#x2F; 405</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table></li></ul><h5 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h5><ul><li>HTTP状态码就是服务向用户返回的状态码和提示信息,客户端的每一次请求,服务器都必须给出回应,回应包括HTTP状态码和数据两部分</li><li>HTTP定义了40个标准状态码,可用于传达客户端请求的结果,状态码分为以下五类<ul><li>1XX: 信息,通信传输协议级信息</li><li>2XX : 成功,表示客户端的请求已成功接收</li><li>3XX : 重定向,表示客户端必须执行一些其他操作才能完成其请求</li><li>4XX : 客户端错误 ,此类错误状态码直接指向客户端</li><li>5XX : 服务器错误</li></ul></li></ul><h5 id="Spring-Boot-实现RESTful"><a href="#Spring-Boot-实现RESTful" class="headerlink" title="Spring Boot 实现RESTful"></a>Spring Boot 实现RESTful</h5><ul><li><p>SpringBoot提供的spring-boot-starter-web组件完全支持开发TRESTful API , 提供了与REST操作方式对应的注解</p></li><li><p>@GetMapping : 处理Get请求,获取资源</p></li><li><p>@PostMapping:处理Post请求,新增资源</p></li><li><p>@PutMapping:处理Put请求,更新资源</p></li><li><p>@DeleteMapping:处理Delete请求 ,删除资源</p></li><li><p>@PatchMapping:处理Patch请求 , 用于资源的部分更新</p></li><li><p>在RESTful架构中, 每个网址代表一种资源,所以URL中建议不要包含动词,只包含名词即可,而且所用的名词往往与数据库中的表名对应</p></li></ul><h5 id="Swagger-介绍"><a href="#Swagger-介绍" class="headerlink" title="Swagger 介绍"></a>Swagger 介绍</h5><ul><li><p>Swagger 是一个规范和完整的框架 , 用于生成描述调用和可视化RESTful风格的Web服务,是非常流行的API表达工具</p></li><li><p>Swagger 能够自动生成晚上的RESTful API文档,同时并根据后台代码的修改同步更新,同时提供完整的测试页面来调试API</p></li><li><p>使用:</p><ul><li><p>添加springfox-swagger2和springfox-swagger-ui依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.springfox<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure></li><li><p>创建Swagger2配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hellworld.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.PathSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;<br><span class="hljs-keyword">import</span> springfox.documentation.service.ApiInfo;<br><span class="hljs-keyword">import</span> springfox.documentation.spi.DocumentationType;<br><span class="hljs-keyword">import</span> springfox.documentation.spring.web.plugins.Docket;<br><span class="hljs-keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;<br><br><span class="hljs-meta">@Configuration</span> <span class="hljs-comment">//该类为配置类</span><br><span class="hljs-meta">@EnableSwagger2</span> <span class="hljs-comment">//启用Swagger2功能</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Swagger2Config</span> &#123;<br><br>    <span class="hljs-keyword">public</span> Docket <span class="hljs-title function_">createRestApi</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Docket</span>(DocumentationType.SWAGGER_2)<br>                .apiInfo(apiInfo())<br>                .select()<br><span class="hljs-comment">//                com包下的所有API都交给Swagger2管理</span><br>                .apis(RequestHandlerSelectors.basePackage(<span class="hljs-string">&quot;com&quot;</span>))<br>                .paths(PathSelectors.any())<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ApiInfo <span class="hljs-title function_">apiInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiInfoBuilder</span>()<br>                .title(<span class="hljs-string">&quot;项目API&quot;</span>) <span class="hljs-comment">//标题</span><br>                .description(<span class="hljs-string">&quot;学习Swagger2的演示项目&quot;</span>) <span class="hljs-comment">// 描述</span><br>                .version(<span class="hljs-string">&quot;1.0&quot;</span>) <span class="hljs-comment">// 版本</span><br>                .build();<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p><code>application.properties</code>中配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">spring.mvc.pathmatch.matching-strategy=ant_path_matcher<br></code></pre></td></tr></table></figure></li><li><p>启动项目后浏览器访问<code>http://localhost:8080/swagger-ui.html</code></p></li></ul><h2 id="MyBatisPlus-快速上手"><a href="#MyBatisPlus-快速上手" class="headerlink" title="MyBatisPlus 快速上手"></a>MyBatisPlus 快速上手</h2><h3 id="ORM介绍"><a href="#ORM介绍" class="headerlink" title="ORM介绍"></a>ORM介绍</h3><ul><li>ORM(Object Relational Mapping , 对象关系映射)  ,是为了解决面向对象与关系型数据库存在的互不匹配现象的一种技术</li><li>ORM通过使用描述对象和数据库之间映射的元数据将程序中的对象自动持久化到关系数据库中</li><li>ORM框架的本质是简化编程中操作数据库的编码</li></ul><p><img src="https://img1.imgtp.com/2023/03/30/Iwb9YseN.png" alt="ORM对象关系映射"></p><h3 id="MyBatis-Plus-介绍"><a href="#MyBatis-Plus-介绍" class="headerlink" title="MyBatis-Plus 介绍"></a>MyBatis-Plus 介绍</h3><ul><li>MyBatis能够非常灵活的实现动态SQL , 可以使用XML或注解来配置和映射原生信息,能够轻松的将Java的pojo(Plain Ordinary Java Object , 普通的Java对象)与数据库中的表和字段进行映射关联</li><li>MyBatis-Plus是MyBatis的增强 ,简化了开发</li></ul><h3 id="MyBatis-Plus的使用"><a href="#MyBatis-Plus的使用" class="headerlink" title="MyBatis-Plus的使用"></a>MyBatis-Plus的使用</h3><ul><li><p>添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><br><span class="hljs-comment">&lt;!-- MyBatisPlus依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- mysql驱动依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.47<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--数据连接池 druid --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.20<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure></li><li><p><code>application.properties</code>下配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs properties"><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.type</span>=<span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3307/ssm_db?characterEncoding=utf-8&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-attr">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure></li><li><p>添加@MapperScan注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.hellworld;<br><br><span class="hljs-keyword">import</span> org.mybatis.spring.annotation.MapperScan;<br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-meta">@SpringBootApplication</span><br><br><span class="hljs-meta">@MapperScan(&quot;com.xxx.mapper&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HellworldApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(HellworldApplication.class, args);<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure></li><li><p>MyBatis CRUD 注解</p><table><thead><tr><th>注解</th><th>功能</th></tr></thead><tbody><tr><td>@Insert</td><td>插入数据</td></tr><tr><td>@Update</td><td>更新数据</td></tr><tr><td>@Delete</td><td>删除数据</td></tr><tr><td>@Select</td><td>查询数据</td></tr><tr><td>@Result</td><td>实现结果集封装</td></tr><tr><td>@Results</td><td>与@Result一起使用,封装多个结果集</td></tr><tr><td>@One</td><td>实现一对一结果集封装</td></tr><tr><td>@Many</td><td>实现一对多结果集封装</td></tr></tbody></table></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis入门</title>
    <link href="http://example.com/2023/01/29/MyBatis%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2023/01/29/MyBatis%E5%85%A5%E9%97%A8/</id>
    <published>2023-01-29T15:28:55.000Z</published>
    <updated>2023-02-22T13:54:52.234Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-MyBatis简介"><a href="#一-MyBatis简介" class="headerlink" title="一. MyBatis简介"></a>一. <a href="https://github.com/mybatis/mybatis-3">MyBatis</a>简介</h3><ul><li>MyBatis历史<ul><li>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁 移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于 2013年11月迁移到Github</li><li>iBatis一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。 iBatis提供的持久层框架 包括SQL Maps和Data Access Objects（DAO）。</li></ul></li><li>MyBatis特性<ul><li>MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架</li><li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集</li><li>MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录</li><li>MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</li></ul></li><li>持久化层技术对比<ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤 </li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见 </li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA<ul><li>操作简便，开发效率高 </li><li>程序中的长难复杂 SQL 需要绕过框架 </li><li>内部自动生产的 SQL，不容易做特殊优化 </li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。 </li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色 </li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据 </li><li>开发效率稍逊于HIbernate，但是完全能够接受</li></ul></li></ul></li></ul><h3 id="二-搭建MyBatis"><a href="#二-搭建MyBatis" class="headerlink" title="二. 搭建MyBatis"></a>二. 搭建MyBatis</h3><ul><li><p>创建Maven工程</p><ul><li><p>打包方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>jar<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Mybatis核心 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.7<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- MySQL驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>创建MyBatis核心配置文件</p><blockquote><p>推荐配置文件命名: mybatis-config.xml</p><p>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息</p><p>核心配置文件存放的位置是src&#x2F;main&#x2F;resources目录下</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta"><span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta"><span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--设置连接数据库的环境--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span><span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/MyBatis&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123456&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--引入映射文件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>创建Mapper接口</p><blockquote><p>MyBatis中的mapper接口相当于以前的dao。区别在于，mapper仅仅是接口,不需要提供实现类。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 添加用户信息</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>创建MyBatis的映射文件</p><blockquote><p>ORM（Object Relationship Mapping）对象关系映射。</p><ul><li><p>对象：Java的实体类对象</p></li><li><p>关系：关系型数据库</p></li><li><p>映射：二者之间的对应关系</p><table><thead><tr><th>java</th><th>数据库</th></tr></thead><tbody><tr><td>类</td><td>表</td></tr><tr><td>属性</td><td>字段 &#x2F; 列</td></tr><tr><td>对象</td><td>记录 &#x2F; 行</td></tr></tbody></table></li><li><p>映射文件命名规则</p><ul><li><p>表所对应的实体类的类名+Mapper.xml </p><blockquote><p>表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml</p><p>因此一个映射文件对应一个实体类，对应一张表的操作</p><p>MyBatis映射文件用于编写SQL，访问以及操作表中的数据</p><p>MyBatis映射文件存放的位置是src&#x2F;main&#x2F;resources&#x2F;mappers目录下</p></blockquote></li><li><p><font color='red'>两个一致</font></p><blockquote><p>mapper接口的全类名和映射文件的命名空间（namespace）保持一致</p><p>mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p></blockquote></li></ul></li></ul></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">    <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.f434.mapper.UserMapper&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!--int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span>&gt;</span><br>    insert into t_user values(null,&#x27;张三&#x27;,&#x27;123&#x27;,23,&#x27;女&#x27;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>junit测试功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">mybatisTest</span> &#123;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><span class="hljs-comment">//      获取核心配置文件的输入流</span><br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(<span class="hljs-string">&quot;mybatis-conf.xml&quot;</span>);<br><span class="hljs-comment">//      获取sqlSessionFactoryBuilder</span><br>        <span class="hljs-type">SqlSessionFactoryBuilder</span> <span class="hljs-variable">sfb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>();<br><span class="hljs-comment">//      获取SqlSessionFactory</span><br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> sfb.build(is);<br><span class="hljs-comment">//      获取Sql的会话对象,mybatis提供的操作数据库的对象</span><br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br><span class="hljs-comment">//      获取UserMapper接口的 代理 实现类对象</span><br>        <span class="hljs-type">userMapper</span> <span class="hljs-variable">mapperImpl</span> <span class="hljs-operator">=</span> sqlSession.getMapper(userMapper.class);<br><span class="hljs-comment">//      调用mapper接口中的方法,来实现添加</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> mapperImpl.insertUser();<br>        System.out.println(<span class="hljs-string">&quot;结果:&quot;</span> + i);<br><br><span class="hljs-comment">//      提交事务</span><br>        sqlSession.commit();<br><br><span class="hljs-comment">//      关闭sqlSession会话</span><br>        sqlSession.close();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的 会话）</p><p>SqlSessionFactory：是“生产”SqlSession的“工厂”</p><p>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的 相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</p></blockquote></li><li><p>加入log4j日志功能</p><ol><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- log4j日志 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li><p>加入log4j的配置文件</p><blockquote><p>log4j的配置文件名为log4j.xml，存放的位置是src&#x2F;main&#x2F;resources目录下</p><blockquote><p>日志级别(从左到右打印的内容越来越详细)</p><p>FATAL(致命)&gt;ERROR(错误)&gt;WARN(警告)&gt;INFO(信息)&gt;DEBUG(调试)</p></blockquote></blockquote></li></ol></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Encoding&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%-5p %d&#123;MM-dd HH:mm:ss,SSS&#125;%m (%F:%L) \n&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;java.sql&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.ibatis&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;info&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="三-核心配置文件"><a href="#三-核心配置文件" class="headerlink" title="三. 核心配置文件"></a>三. 核心配置文件</h3></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">      MyBatis核心配置文件中,标签的顺序</span><br><span class="hljs-comment">        (</span><br><span class="hljs-comment">         properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,</span><br><span class="hljs-comment">         reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?</span><br><span class="hljs-comment">         )</span><br><span class="hljs-comment">--&gt;</span><br><br><br><span class="hljs-comment">&lt;!--    引入properties , 以$&#123;属性名&#125;来访问属性值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;jdbc.properties&quot;</span>/&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">settings</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--将表中字段的下划线自动转换为驼峰--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br><br>        <span class="hljs-comment">&lt;!--开启延迟加载--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">setting</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;lazyLoadingEnabled&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--   typeAlias: 设置类型别名</span><br><span class="hljs-comment">             属性:</span><br><span class="hljs-comment">                type: 设置需要设置别名的类型</span><br><span class="hljs-comment">                alias: 设置某个类型的别名(如果不设置该属性, 那么该类型拥有默认的别名,即类名, 且不区分大小写)</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">typeAliases</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;typeAlias type=&quot;com.f434.pojo.User&quot; alias=&quot;user&quot;&gt;&lt;/typeAlias&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--    以包为单位, 将包下所有的类型设置默认的类型别名,即类名, 且不区分大小写--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.f434.pojo&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">typeAliases</span>&gt;</span><br>    <br><br><br><br><span class="hljs-comment">&lt;!--    environments: 配置连接多个数据库环境</span><br><span class="hljs-comment">            属性:</span><br><span class="hljs-comment">                default: 设置默认使用的数据库环境</span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    environment : 配置某个具体的数据库环境</span><br><span class="hljs-comment">            属性:</span><br><span class="hljs-comment">                id :表示连接数据库环境的唯一标识,(不能重复)</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    transactionManager: 设置事务管理方式</span><br><span class="hljs-comment">            属性:</span><br><span class="hljs-comment">                type=&quot;JDBC|MANAGED&quot;</span><br><span class="hljs-comment">                    JDBC: 表示当前环境中,执行SQL时,使用的是JDBC中原生的事务管理方式(事务的提交或者回滚需要手动处理)</span><br><span class="hljs-comment">                    MANAGED: 被管理 , 例如Spring</span><br><span class="hljs-comment">--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br><br><span class="hljs-comment">&lt;!--    dataSource : 配置数据源</span><br><span class="hljs-comment">            属性:</span><br><span class="hljs-comment">                type: 设置数据源的类型</span><br><span class="hljs-comment">                type = &quot;POOLED|UNPOOLED|JNDI&quot;</span><br><span class="hljs-comment">                    POOLED: 使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建</span><br><span class="hljs-comment">                    UNPOOLED: 不使用数据库连接池，即每次使用连接都需要重新创建</span><br><span class="hljs-comment">                    JNDI: 使用上下文中的数据源</span><br><span class="hljs-comment">--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--设置驱动类的全类名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的连接地址--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的用户名--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-comment">&lt;!--设置连接数据库的密码--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br><br><br><br><br><span class="hljs-comment">&lt;!--    引入映射文件--&gt;</span><br><span class="hljs-comment">&lt;!--    同级目录--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;mapper resource=&quot;mappers/UserMapper.xml&quot;/&gt;--&gt;</span><br><br><span class="hljs-comment">&lt;!--    package : 以包为单位引入映射文件</span><br><span class="hljs-comment">            要求:</span><br><span class="hljs-comment">                1. mapper接口所在的包要和映射文件所在的包一致</span><br><span class="hljs-comment">                2. mapper接口要和映射文件的名字保持一致</span><br><span class="hljs-comment">--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">package</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.f434.mapper&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="四-MyBatis增删改查"><a href="#四-MyBatis增删改查" class="headerlink" title="四. MyBatis增删改查"></a>四. MyBatis增删改查</h3><ol><li><p>添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int insertUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> &gt;</span><br>        insert into t_user values(null , &quot;admin&quot; , &quot;123456&quot; , 23 , &quot;男&quot; , &quot;yanchaoyu@gmail.com&quot;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int delUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delUser&quot;</span>&gt;</span><br>        delete from t_user where id = 3;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int changeUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;changeUser&quot;</span>&gt;</span><br>        update t_user set username=&#x27;zhangsan&#x27; where id = 4;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询</p><ul><li><p>查询一个实体类对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--     User queryUserById();--&gt;</span><br><span class="hljs-comment">&lt;!--    查询功能的标签必须设置resultType或者resultMap</span><br><span class="hljs-comment">                resultType :设置默认的映射关系</span><br><span class="hljs-comment">                resultMap : 设置自定义的映射关系</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user where id = 4;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询集合</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; queryUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        当查询的数据为多条时，不能使用实体类作为返回值，只能使用集合</span><br><span class="hljs-comment">        否则会抛出异常TooManyResultsException；</span><br><span class="hljs-comment">        但是若查询的数据只有一条，可以使用实体类或集合作为返回值</span><br><span class="hljs-comment">    --&gt;</span><br></code></pre></td></tr></table></figure><h3 id="五-MyBatis获取参数值的两种方式"><a href="#五-MyBatis获取参数值的两种方式" class="headerlink" title="五. MyBatis获取参数值的两种方式"></a><font color='red'>五. MyBatis获取参数值的两种方式</font></h3></li></ul></li></ol><blockquote><p>MyBatis获取参数的两种方式<code>$&#123;&#125;</code>和<code>#&#123;&#125;</code></p><p><font color='cornflowerblue'>${}的本质就是字符串拼接</font></p><p><font color='cornflowerblue'>#{}的本质就是占位符赋值</font></p><p>${}使用字符串拼接的方式拼接sql，若为字符串类型或日期类型的字段进行赋值时，需要手动加单引 号；但是#{}使用占位符赋值的方式拼接sql，此时为字符串类型或日期类型的字段进行赋值时，可以<font color='red'>自动</font>添加单引号</p></blockquote><ol><li><p>单个字面量类型的参数</p><ul><li><p>可以使用${}和#{}以任意的名称获取参数的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User queryUserByUserName(String username)--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByUserName&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--select * from t_user where username = #&#123;username&#125;;--&gt;</span><br>        select * from t_user where username = &#x27;$&#123;username&#125;&#x27;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>多个字面量类型的参数</p><ul><li><p>MyBatis会自动将这些参数放在一个map集合中，以arg0,arg1…为键，以参数为值；以 param1,param2…为键，以参数为值；因此只需要通过${}和#{}访问map集合的键就可以获取相对应的 值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User checkLogin(String username , String password);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;checkLogin&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--select * from t_user where username = #&#123;arg0&#125; and password = #&#123;arg1&#125; and age = #&#123;arg2&#125;;--&gt;</span><br>        select * from t_user where username = &#x27;$&#123;arg0&#125;&#x27; and password = &#x27;$&#123;arg1&#125;&#x27; and age = &#x27;$&#123;arg2&#125;&#x27;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>map集合类型的参数</p><ul><li><p>若mapper接口中的方法需要的参数为多个时，此时可以手动创建map集合，将这些数据放在map中 只需要通过${}和#{}访问map集合的键就可以获取相对应的值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User queryUserByNameAndPass(Map&lt;String , Object&gt; datas);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByNameAndPass&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select *from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>实体类类型参数</p><ul><li><p>使用${}和#{}，通过访问实体类对象中的属性名获取属性值，注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User queryUserBypojo(User u);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserBypojo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;username&#125; and password = #&#123;password&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>使用@Param标识参数</p><ul><li><p>可以通过@Param注解标识mapper接口中的方法参数 此时，会将这些参数放在map集合中，以@Param注解的value属性值为键，以参数为值；以 param1,param2…为键，以参数为值；只需要通过${}和#{}访问map集合的键就可以获取相对应的值， 注意${}需要手动加单引号</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User queryUserByParam(@Param(&quot;user&quot;) String username , @Param(&quot;pass&quot;) String password);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;queryUserByParam&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    select * from t_user where username = #&#123;user&#125; and password = #&#123;pass&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="六-MyBatis的各种查询功能"><a href="#六-MyBatis的各种查询功能" class="headerlink" title="六. MyBatis的各种查询功能"></a>六. MyBatis的各种查询功能</h3><ol><li><p>查询一个实体类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据ID查询数据</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserById</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    User getUserById(@Param(&quot;id&quot;) int id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询一个list集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; getAllUser();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUser&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询单个数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *查询总条目</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int getCount();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getCount&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;int&quot;</span>&gt;</span><br>        select count(*) from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询一条数据为map集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据ID查询数据</span><br><span class="hljs-comment"> */</span><br>Map&lt;String , Object&gt; <span class="hljs-title function_">getUserByIdAndMap</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;id&quot;)</span> <span class="hljs-type">int</span> id)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Map&lt;String , Object&gt; getUserByIdAndMap(@Param(&quot;id&quot;) int id);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByIdAndMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;map&quot;</span>&gt;</span><br>        select * from t_user where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>查询多条数据为map集合</p><ul><li><p>法一:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 查询所有用户信息存入Map</span><br><span class="hljs-comment"> * 将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，此时可以将这些map放在一个list集合中获取</span><br><span class="hljs-comment"> */</span><br>List&lt;Map&lt;String , Object&gt;&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Map&lt;String , Object&gt; getAllUserToMap();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>法二:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 查询所有用户信息存入Map</span><br><span class="hljs-comment">   *  将表中的数据以map集合的方式查询，一条数据对应一个map；若有多条数据，就会产生多个map集合，并且最终要以一个map的方式返回数据，此时需要通过<span class="hljs-doctag">@MapKey</span>注解设置map集合的键，值是每条数据所对应的map集合</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">   */</span><br>     <br>  <span class="hljs-meta">@MapKey(&quot;id&quot;)</span><br>  Map&lt;String , Object&gt; <span class="hljs-title function_">getAllUserToMap</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    Map&lt;String , Object&gt; getAllUserToMap();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllUserToMap&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from t_user;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    查询结果:</span><br><span class="hljs-comment">        &#123;</span><br><span class="hljs-comment">            1=&#123;password=123456, sex=男, id=1, age=23, username=admin&#125;,</span><br><span class="hljs-comment">            2=&#123;password=123456, sex=男, id=2, age=23, username=张三&#125;,</span><br><span class="hljs-comment">            3=&#123;password=123456, sex=男, id=3, age=23, username=张三&#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">--&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="七-特殊SQL的执行"><a href="#七-特殊SQL的执行" class="headerlink" title="七. 特殊SQL的执行"></a>七. 特殊SQL的执行</h3><ol><li><p>模糊查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据用户名模糊查询</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserByLike</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;username&quot;)</span> String username)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;User&gt; getUserByLike(@Param(&quot;username&quot;) String username);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserByLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    select * from t_user where username like &#x27;%$&#123;username&#125;%&#x27;;--&gt;</span><br><span class="hljs-comment">&lt;!--    select * from t_user where username like concat(&#x27;%&#x27; , #&#123;username&#125; , &#x27;%&#x27;);--&gt;</span><br>        select * from t_user where username like &quot;%&quot;#&#123;username&#125;&quot;%&quot;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>批量删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据id批量删除</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">delMore</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;ids&quot;)</span> String ids)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int delMore(@Param(&quot;ids&quot;) String ids);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delMore&quot;</span>&gt;</span><br>        delete from t_user where id in ($&#123;ids&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>动态设置表名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据表名查询所有数据</span><br><span class="hljs-comment"> */</span><br>List&lt;User&gt; <span class="hljs-title function_">getUserToTable</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;t_name&quot;)</span> String t_name)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    List&lt;User&gt; getUserToTable(@Param(&quot;t_name&quot;) String t_name);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserToTable&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>        select * from $&#123;t_name&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>添加功能获取自增的主键</p><blockquote><p>t_clazz(clazz_id,clazz_name) </p><p>t_student(student_id,student_name,clazz_id) </p><p>1、添加班级信息</p><p> 2、获取新添加的班级的id </p><p>3、为班级分配学生，即将某学的班级id修改为新添加的班级的id</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 添加用户</span><br><span class="hljs-comment"> */</span><br>   <br><span class="hljs-type">int</span> <span class="hljs-title function_">insertUser</span><span class="hljs-params">(User u)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    int insertUser(User u);</span><br><span class="hljs-comment">        useGeneratedKeys: 设置当前标签中的sql使用了自增的id</span><br><span class="hljs-comment">        keyProperty : 将自增的主键的值赋值给传输到映射文件中参数的某个属性 (自增信息由谁携带)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;insertUser&quot;</span> <span class="hljs-attr">useGeneratedKeys</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">keyProperty</span>=<span class="hljs-string">&quot;id&quot;</span>&gt;</span><br>        insert into t_user values (null , #&#123;username&#125; , #&#123;password&#125; , #&#123;age&#125; , #&#123;sex&#125; , #&#123;email&#125;);<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="八-自定义映射resultMap"><a href="#八-自定义映射resultMap" class="headerlink" title="八. 自定义映射resultMap"></a>八. 自定义映射resultMap</h3><ol><li><p>resultMap处理字段和属性的映射关系</p><blockquote><p>若字段名和实体类中的属性名不一致，则可以通过resultMap设置自定义映射</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment"> Mybatis面向接口的两个一致</span><br><span class="hljs-comment">      1. 映射文件的nameSpace 要和 mapper接口的全类名保持一致</span><br><span class="hljs-comment">      2. 映射文件中SQL语句的id要和mapper接口中的方法名保持一致</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.f434.mapper.EmpMapper&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        resultMap: 自定义映射关系</span><br><span class="hljs-comment">            id: 唯一标识,不能重复</span><br><span class="hljs-comment">            type: 设置映射关系中的实体类类型</span><br><span class="hljs-comment">            子标签</span><br><span class="hljs-comment">                id: 设置主键的映射关系</span><br><span class="hljs-comment">                result: 设置普通字段的映射关系</span><br><span class="hljs-comment">association：设置多对一的映射关系</span><br><span class="hljs-comment">collection：设置一对多的映射关系</span><br><span class="hljs-comment">                属性:</span><br><span class="hljs-comment">                    property: 设置映射关系中的属性名,必须是type属性所设置的实体类类中的属性名</span><br><span class="hljs-comment">                    column: 设置映射关系中的字段名 , 必须是SQL语句查询出的字段名</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    --&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--    List&lt;Emp&gt; getAllEmp();--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empResultMap&quot;</span>&gt;</span><br>        select * from t_emp;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getAllEmpOld&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--    select eid , emp_name empName , age , sex , email , did from t_emp;--&gt;</span><br>        select * from t_emp;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>若字段名和实体类中的属性名不一致，但是字段名符合数据库的规则（使用_），实体类中的属性 名符合Java的规则（使用驼峰）,解决方式:</p><ol><li><p>可以通过为字段起别名的方式，保证和实体类中的属性名保持一致</p></li><li><p>可以在MyBatis的核心配置文件中设置一个全局配置信息mapUnderscoreToCamelCase，可 以在查询表中数据时，自动将_类型的字段名转换为驼峰</p><p>例如 : user_name 将会自动转化成 userName</p></li></ol></blockquote></li><li><p>多对一映射处理</p><ol><li><p>级联方式处理映射关系(联级属性赋值)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpAndDept(@Param(&quot;eid&quot;) Integer eid);--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--处理多对一映射关系方式一: 级联属性赋值--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap01&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--通过级联属性解决多对一的映射关系--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept.deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap01&quot;</span>&gt;</span><br>        select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>使用association处理映射关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--处理多对一映射关系方式二: association--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptResultMap02&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    association : 处理多对一的映射关系</span><br><span class="hljs-comment">    property : 需要来处理多对一的映射关系属性名</span><br><span class="hljs-comment">    javaType : 该属性的类型</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span> <span class="hljs-attr">javaType</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>      <br>      <br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDept&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptResultMap02&quot;</span>&gt;</span><br>    select * from t_emp left join t_dept on t_emp.did = t_dept.did where t_emp.eid = #&#123;eid&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>分步查询</p></li><li><p>第一步:查询员工信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询员工信息,以及员工所对应的部门</span><br><span class="hljs-comment"> * 分步第一步: 先查询员工信息</span><br><span class="hljs-comment"> */</span><br>Emp <span class="hljs-title function_">getEmpAndDeptByStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;eid&quot;)</span> Integer eid)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Emp getEmpAndDeptByStepOne(@Param(&quot;eid&quot;) Integer eid);--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>         <br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       select : 设置分步查询的sql唯一标识(nameSpace.SQLid或mapper接口的全类名.方法名)</span><br><span class="hljs-comment">       column : 设置分步查询的条件 根据哪个字段查询(did是Emp中对应Dept的id值，并传参给DeptMapper中定义的getDeptAndEmpByStepTow)</span><br><span class="hljs-comment">       fetchType : 当开启了全局的延迟加载之后 , 可通过此属性手动控制延迟加载的效果(开启了全局的延迟加载之后)</span><br><span class="hljs-comment">           fetchType=&quot;lazy|eager&quot; :</span><br><span class="hljs-comment">       --&gt;</span><br>         <br>       <span class="hljs-tag">&lt;<span class="hljs-name">association</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;dept&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.f434.mapper.DeptMapper.getEmpAndDeptByStepTwo&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">fetchType</span>=<span class="hljs-string">&quot;eager&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">association</span>&gt;</span><br>         <br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpAndDeptByStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;empAndDeptByStepResultMap&quot;</span>&gt;</span><br>       select * from t_emp where eid = #&#123;eid&#125;;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>根据第一步查询出的部门id来查询出该部门下对应的员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询员工信息,以及员工所对应的部门</span><br><span class="hljs-comment"> * 分步第二步: 通过did查询员工对应的部门</span><br><span class="hljs-comment"> */</span><br>Dept <span class="hljs-title function_">getEmpAndDeptByStepTwo</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTow(@Param(&quot;did&quot;) Integer did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTow&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where did = #&#123;did&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>一对多映射处理</p><ol><li><p>collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 获取部门以及部门中所有的员工信息</span><br><span class="hljs-comment"> */</span><br>            <br>Dept <span class="hljs-title function_">getDeptAndEmp</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dept getDeptAndEmp(@Param(&quot;did&quot;) Integer did);--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <br>            <br>            <br>       <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">       collection: 处理一对多的关系属性</span><br><span class="hljs-comment">       ofType : 表示该属性所对应的集合中存储数据的类型(由集合类型决定)</span><br><span class="hljs-comment">       --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span> <span class="hljs-attr">ofType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;eid&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;empName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;emp_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;age&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;email&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br>            <br>       <span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>            <br>   <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmp&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;getDeptAndEmpResultMap&quot;</span>&gt;</span><br>       select * from t_dept left join t_emp on t_dept.did = t_emp.did where t_dept.did = #&#123;did&#125;;<br>   <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>分步查询</p><ol><li><p>查询部门信息</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询, 查询出部门下的员工</span><br><span class="hljs-comment"> * 分步查询第一步 : 查询部门信息</span><br><span class="hljs-comment"> */</span><br>Dept <span class="hljs-title function_">getDeptAndEmpStepOne</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Dept getDeptAndEmpStepOne(@Param(&quot;did&quot;) Integer did);--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deptAndEmpStepResultMap&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Dept&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;did&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;deptName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;dept_name&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">result</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">collection</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;emps&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">select</span>=<span class="hljs-string">&quot;com.f434.mapper.EmpMapper.getDeptAndEmpByStepTow&quot;</span></span><br><span class="hljs-tag">                    <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;did&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">collection</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpStepOne&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;deptAndEmpStepResultMap&quot;</span>&gt;</span><br>        select * from t_dept where did = #&#123;did&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>再根据部门id查询部门中的员工</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过分步查询, 查询出部门下的员工</span><br><span class="hljs-comment"> * 分步查询第二步 : 根据did查询员工信息</span><br><span class="hljs-comment"> */</span><br>List&lt;Emp&gt; <span class="hljs-title function_">getDeptAndEmpByStepTow</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;did&quot;)</span> Integer did)</span>;<br></code></pre></td></tr></table></figure> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getDeptAndEmpByStepTow(@Param(&quot;did&quot;) Integer did);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getDeptAndEmpByStepTow&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp where did = #&#123;did&#125;;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>分步查询的优点：<font color='cornflowerblue'>可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息</font>：</p><p>​lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载</p><p>​aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个 属性会按需加载</p><p>​<font color='red'>实现按需加载，获取的数据是什么，就只执行相应的sql。</font></p></blockquote></li></ol></li></ol></li></ol><h3 id="九-动态SQL"><a href="#九-动态SQL" class="headerlink" title="九. 动态SQL"></a>九. 动态SQL</h3><blockquote><p>根据特定条件动态拼装SQL语句的功能，它存在的意义是为了解决 拼接SQL语句字符串时的痛点问题</p></blockquote><ol><li><p>if</p><blockquote><p>if标签可通过test属性的表达式进行判断，若表达式的结果为true，则标签中的内容会执行；反之标签中 的内容不会执行</p><p>where 1 &#x3D; 1解决where没有条件报错的问题</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByConditionOne&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;emp&quot;</span>&gt;</span><br>    select * from t_emp where 1 = 1<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span>emp_name = #&#123;empName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span> and sex = #&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span> and age = #&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span> and email = #&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>where</p><blockquote><p>where和if一般结合使用： </p><ol><li><p>若where标签中的if条件都不满足，则where标签没有任何功能，即不会添加where关键字 </p></li><li><p>若where标签中的if条件满足，则where标签会自动添加where关键字，并将条件最前方多余的 and去掉 </p></li><li><p>注意：where标签不能去掉条件最后多余的and</p></li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByConditionTwo&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;emp&quot;</span>&gt;</span><br>    select * from t_emp<br>   <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span>emp_name = #&#123;empName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span> and sex = #&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span> and age = #&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span> and email = #&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>         <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>trim</p><blockquote><p>trim用于去掉或添加标签中的内容 </p><ol><li>prefix：在trim标签中的内容的前面添加某些内容 </li><li>prefixOverrides：在trim标签中的内容的前面去掉某些内容 </li><li>suffix：在trim标签中的内容的后面添加某些内容 </li><li>suffixOverrides：在trim标签中的内容的后面去掉某些内容</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByCondition&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;emp&quot;</span>&gt;</span><br>    select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;EmpColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">trim</span> <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;where&quot;</span> <span class="hljs-attr">suffixOverrides</span>=<span class="hljs-string">&quot;and|or&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span>emp_name = #&#123;empName&#125; and<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span> sex = #&#123;sex&#125; and<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span>  age = #&#123;age&#125; and<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span>  email = #&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">trim</span>&gt;</span><br>         <br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>choose when otherwise</p><blockquote><p>choose、when、otherwise相当于if…else if..else</p><p> when:至少有一个  otherwise: 至多有一个</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--List&lt;Emp&gt; getEmpByChoose(Emp emp);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getEmpByChoose&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Emp&quot;</span>&gt;</span><br>    select * from t_emp<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;empName != null and empName != &#x27;&#x27;&quot;</span>&gt;</span>emp_name = #&#123;empName&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;sex != null and sex != &#x27;&#x27;&quot;</span>&gt;</span>sex = #&#123;sex&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null and age != &#x27;&#x27;&quot;</span>&gt;</span>age = #&#123;age&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span>email = #&#123;email&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span> eid = 5<span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>foreach</p><blockquote><ol><li>collection：设置要循环的数组或集合 </li><li>item：表示集合或数组中的每一个数据 </li><li>separator：设置循环体之间的分隔符 </li><li>open：设置foreach标签中的内容的开始符 </li><li>close：设置foreach标签中的内容的结束符</li></ol></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--int delMoreByArray(@Param(&quot;eids&quot;) Integer[] eids);--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;delMoreByArray&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--delete from t_emp where eid in</span><br><span class="hljs-comment">    &lt;foreach collection=&quot;eids&quot; item=&quot;eid&quot; separator=&quot;,&quot; open=&quot;(&quot; close=&quot;)&quot; &gt;#&#123;eid&#125;&lt;/foreach&gt;--&gt;</span><br>         <br>    delete from t_emp where<br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;eids&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;eid&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;or&quot;</span>&gt;</span>eid = #&#123;eid&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>         <br>         <br><span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>SQL片段</p><blockquote><p>sql片段，可以记录一段公共sql片段，在使用的地方通过include标签进行引入</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">   <span class="hljs-comment">&lt;!--sql片段--&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">sql</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;EmpColumns&quot;</span>&gt;</span>eid , emp_name , age , sex , email<span class="hljs-tag">&lt;/<span class="hljs-name">sql</span>&gt;</span><br>         <br>select <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">refid</span>=<span class="hljs-string">&quot;EmpColumns&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span> from t_emp<br></code></pre></td></tr></table></figure></li></ol><h3 id="十-MyBatis的缓存"><a href="#十-MyBatis的缓存" class="headerlink" title="十. MyBatis的缓存"></a><font color='red'>十. MyBatis的缓存</font></h3><h4 id="1-MyBatis的一级缓存"><a href="#1-MyBatis的一级缓存" class="headerlink" title="1. MyBatis的一级缓存"></a>1. MyBatis的一级缓存</h4><ul><li>​一级缓存是<font color='red'>SqlSession级别的</font>，通过同一个SqlSession查询的数据会被缓存，下次查询相同的数据，就 会从缓存中直接获取，不会从数据库重新访问</li><li>使一级缓存失效的四种情况：<ul><li>不同的SqlSession对应不同的一级缓存</li><li>同一个SqlSession但是查询条件不同 </li><li>同一个SqlSession两次查询期间执行了任何一次增删改操作</li><li>同一个SqlSession两次查询期间手动清空了缓存</li></ul></li></ul><h4 id="2-MyBatis的二级缓存"><a href="#2-MyBatis的二级缓存" class="headerlink" title="2.MyBatis的二级缓存"></a>2.MyBatis的二级缓存</h4><ul><li>二级缓存是SqlSessionFactory级别，通过同一个SqlSessionFactory创建的SqlSession查询的结果会被 缓存；此后若再次执行相同的查询语句，结果就会从缓存中获取</li><li>开启条件:<ul><li>在核心配置文件中，设置全局配置属性cacheEnabled&#x3D;”true”，默认为true，不需要设置</li><li>在映射文件中设置标签</li><li>二级缓存必须在SqlSession关闭或提交之后有效</li><li>查询的数据所转换的实体类类型必须实现序列化的接口</li></ul></li><li>使二级缓存失效的情况：<ul><li>两次查询之间执行了任意的增删改，会使一级和二级缓存同时失效</li></ul></li></ul><hr><p>   ………………..未完……………………</p></li></ol></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="框架" scheme="http://example.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MarkDown基础语法</title>
    <link href="http://example.com/2023/01/25/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2023/01/25/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2023-01-25T15:00:28.000Z</published>
    <updated>2023-03-30T12:37:14.197Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><blockquote><blockquote><p>We believe that writing is about content, about what you want to say – not about fancy formatting.  </p><p>重内容,轻形式</p></blockquote></blockquote><blockquote><ol><li><p>此教程仅个人整理,<strong>仅入门</strong>,如有错误,还望指正</p></li><li><p>此教程所用编辑器为 <u><strong>VSCode</strong></u></p></li><li><p>需要用到的插件 <u><strong>Markdown Preview Enhanced</strong></u></p><p>by <a href="https://github.com/f-434">f-434 </a></p></li></ol></blockquote><h3 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h3><ul><li>Markdown 是一种<strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。最开始是为了让使用者更方便的转换html</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 <code>.md</code> , <code>.markdown</code></li></ul><h3 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h3><ul><li>专注你的文字内容而不是排版样式，安心写作。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li><li>可读、直观、学习成本低。</li></ul><h3 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h3><ol><li><p>使用 &#x3D; 和 - 标记一级和二级标题</p></li><li><p>使用 # 号标记</p><ul><li>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># h1<br>## h2<br>### h3<br>#### h4<br>##### h5<br>###### h6<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h3><ol><li><p>段落换行</p><ul><li>段落的换行是使用两个以上空格加上回车  </li><li>也可以在段落后面使用一个空行来表示重新开始一个段落。</li></ul></li><li><p>字体样式</p>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span><span class="hljs-strong">*斜体文字*</span><br><span class="hljs-bullet">- </span><span class="hljs-emphasis">_斜体文字_</span><br><span class="hljs-bullet">- </span><span class="hljs-emphasis">__粗体文字__</span><br><span class="hljs-bullet">- </span><span class="hljs-strong">***粗斜体文字**</span>*<br><span class="hljs-bullet">- </span><span class="hljs-emphasis">___粗斜体文字__</span>_<br></code></pre></td></tr></table></figure></li><li><p>分割线</p><ul><li>在一行中用三个以上的星号、减号、下划线来建立一个分隔线，行内不能有其他东西</li><li>也可以在星号或是减号中间插入空格 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> * *<br><span class="hljs-bullet">-</span> - -<br><span class="hljs-section"><span class="hljs-strong">****</span>**</span><br><span class="hljs-section">------</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除线</p><ul><li>只需要在需要加删除线的文字的两端加上两个波浪线 ~~ 即可</li></ul></li></ol><pre><code class="hljs">`  ~~删除线~~`</code></pre><ol start="5"><li>下划线<ul><li>可以通过 HTML 的标签来实现</li></ul></li></ol><pre><code class="hljs">` &lt;u&gt;下划线&lt;/u&gt;</code></pre><p>  &#96;</p><ol><li>脚注<ul><li>脚注是对文本的补充说明。</li><li>格式为: [^ 内容]  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">致谢[^文本]<br>[<span class="hljs-symbol">^文本</span>]: <span class="hljs-link">感谢观看此教程</span><br><span class="hljs-code">            </span><br></code></pre></td></tr></table></figure>  <img src="/img/%E8%84%9A%E6%B3%A8.png" alt="脚注"></li></ul></li></ol><h3 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h3><ol><li><p>无序列表</p><ul><li><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 列表1<br><span class="hljs-bullet">*</span> 列表2<br><br><span class="hljs-bullet">+</span> 列表1<br><span class="hljs-bullet">+</span> 列表2<br><br><span class="hljs-bullet">-</span> 列表1<br><span class="hljs-bullet">-</span> 列表2<br></code></pre></td></tr></table></figure></li></ul></li><li><p>有序列表</p><ul><li>有序列表使用数字并加上 . 号来表示<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 排名<span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>. 排名<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>列表嵌套</p><ul><li>列表嵌套只需在子列表中的选项前面添加四个空格 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表1<br><span class="hljs-bullet">    1.</span> 排名1<br><span class="hljs-bullet">    2.</span> 排名2<br><span class="hljs-bullet">-</span> 列表2<br><span class="hljs-bullet">    1.</span> 排名1<br><span class="hljs-bullet">    2.</span> 排名2<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h3><ol><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</li><li>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：   <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 内容</span><br></code></pre></td></tr></table></figure></li><li>区块中使用列表  <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 内容</span><br></code></pre></td></tr></table></figure></li><li>列表中使用区块  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">主题一</span><br>      <br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第一项</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第二项</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">主题二</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第一项</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第二项</span><br>      <br></code></pre></td></tr></table></figure></li></ol><h3 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h3><ol><li><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96;）</p></li><li><p>代码块使用 4 个空格或者一个制表符（Tab 键）</p></li><li><p>也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）,指定的好处:<strong>代码高亮显示</strong></p></li></ol><ul><li>指定   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(soc.getInputStream()));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <br>    &#125;<br>        <br></code></pre></td></tr></table></figure><ul><li>不指定   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                    <br>                    BufferedReader reader = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(soc.getInputStream()));<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                        e.printStackTrace();<br>                    &#125;<br>                    <br>                &#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h3><ol><li>带有链接别名<br>  <code> [链接名称](链接地址)</code><br>  <a href="https://github.com/f-434">yanchaoyu</a></li><li>不带别名<br><code>&lt;链接地址&gt;</code><br><a href="https://github.com/f-434">https://github.com/f-434</a></li></ol><h3 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h3><ul><li>格式如下:<blockquote><ol><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字<br>  <strong>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt;标签</strong></li></ol></blockquote></li></ul><h3 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h3><ul><li><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br> 语法如下:</p> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头   </span>|<br>|<span class="hljs-string">  ----   </span>|<span class="hljs-string"> ----- </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure></li><li><p>我们可以设置表格的对齐方式：</p><ul><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  :----  </span>|<span class="hljs-string"> :----:</span>|<span class="hljs-string"> ----: </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>    <br></code></pre></td></tr></table></figure></li></ul><h3 id="Markdown-选框"><a href="#Markdown-选框" class="headerlink" title="Markdown 选框"></a>Markdown 选框</h3><p><code> - [ ] 复选框</code><br><code> - [X] 复选框(选中)</code></p><ul><li><input disabled="" type="checkbox"> 语文</li><li><input disabled="" type="checkbox"> 地理</li><li><input disabled="" type="checkbox"> 生物</li><li><input checked="" disabled="" type="checkbox"> java</li><li><input checked="" disabled="" type="checkbox"> Python</li><li><input checked="" disabled="" type="checkbox"> Hadoop</li><li><input checked="" disabled="" type="checkbox"> ….</li></ul><p>| 表头 | 表头 |</p><p>|——|—–|</p><p>|  1  |  2   |</p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="技巧" scheme="http://example.com/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>LinuxSell部分</title>
    <link href="http://example.com/2023/01/25/LinuxSell%E9%83%A8%E5%88%86/"/>
    <id>http://example.com/2023/01/25/LinuxSell%E9%83%A8%E5%88%86/</id>
    <published>2023-01-25T13:44:56.000Z</published>
    <updated>2023-02-04T04:50:34.607Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Shell初识"><a href="#Shell初识" class="headerlink" title="Shell初识"></a>Shell初识</h1><ol><li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p></li><li><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p></li><li><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!&#x2F;bin&#x2F;sh</strong>，它同样也可以改为 <strong>#!&#x2F;bin&#x2F;bash</strong>。</p><p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p></li></ol><h3 id="运行shell的两种方式"><a href="#运行shell的两种方式" class="headerlink" title="运行shell的两种方式"></a>运行shell的两种方式</h3><ol><li><strong>作为可执行程序</strong></li><li><strong>作为解释器参数</strong></li></ol><h3 id="编写步骤"><a href="#编写步骤" class="headerlink" title="编写步骤"></a>编写步骤</h3><ol><li>创建 <code>.sh</code>文件 –&gt; <code>touch test.sh</code></li><li>赋予可执行权限 –&gt; <code>chmod +x test.sh</code></li><li>编辑脚本 –&gt; <code>vim test.sh</code></li><li>执行脚本 –&gt; <code>./ test.sh</code></li></ol><h3 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h3><ol><li><p><strong>命名规范</strong></p><ul><li><p>变量名和等号之间不能有空格.</p></li><li><p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p></li><li><p>中间不能有空格，可以使用下划线 **_**。</p></li><li><p>不能使用标点符号。</p></li><li><p>变量声明等号左右没有空格</p></li><li><p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>age = 16<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用变量</strong></p><ul><li><p>使用一个定义过的变量，只要在变量名前面加美元符号即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>echo $name<br>echo $&#123;name&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界(<strong>推荐添加</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">age =16<br>echo $age<br>echo $&#123;age&#125;years<br></code></pre></td></tr></table></figure><p>注意 : 如果不给<code>age</code>变量加花括号，写成<code>echo $ageyears</code>，解释器就会把<code>$ageyears</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子</p></li></ul></li><li><p><strong>只读变量(readonly )</strong></p><ul><li><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">myid = 1000<br>readonly myid<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除变量 (unset)</strong></p><ul><li><p>使用 unset 命令可以删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>name = &quot;张三&quot;<br><br>unset name<br><br>echo name #没有任何输出<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>变量类型</strong></p><ul><li><strong>局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul></li></ol><hr><h3 id="shell-字符串"><a href="#shell-字符串" class="headerlink" title="shell 字符串"></a>shell 字符串</h3><ul><li><p><strong>单引号</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">str</span> = <span class="hljs-string">&#x27;aaa bbb ccc&#x27;</span><br></code></pre></td></tr></table></figure><p>特点 : </p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul></li><li><p><strong>双引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>str = &quot;xingming : $&#123;name&#125; , 年龄\&quot; 16岁 \&quot; , 性别 : 男&quot;<br></code></pre></td></tr></table></figure><p>特点:</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></li><li><p>拼接字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>name = &quot;张三&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">双引号</span><br>str1 = &quot;你好 , $&#123;name&#125; !&quot;<br>str2 = &quot;你好 , &quot;$name&quot; !&quot;<br><br>echo $str1 $str2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单引号</span><br>str3 = &#x27;你好 , &#x27;$name&#x27; !&#x27;<br>str4 = &#x27;你好 , $&#123;name&#125;&#x27; !&#x27;<br><br>echo $str3 $str4<br><br><br><br></code></pre></td></tr></table></figure></li><li><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd&quot;<br>echo $&#123;#string&#125; # 结果为4<br></code></pre></td></tr></table></figure></li><li><p><strong>提取字符串</strong>   (<strong>第一个字符的索引值为 0</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd&quot;<br>echo $&#123;string:1:3&#125; # 输出 bcd<br></code></pre></td></tr></table></figure></li><li><p><strong>查找字符串 (以上脚本中   &#96;    是反引号，而不是单引号  ‘   )</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd abcd abcd&quot;<br>echo `expr index &quot;$&#123;string&#125;&quot; cd` # 输出2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">谁先出现 , 输出谁的下标, 默认从 0 开始</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h3><ul><li><p><strong>bash支持一维数组（不支持多维数组），并且没有限定数组的大小</strong>。</p></li><li><p><strong>定义数组</strong></p><ul><li><p>用括号来表示数组，数组元素用”空格”符号分割开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_name=(&quot;张三&quot; &quot;李四&quot; &quot;王五&quot; &quot;赵六&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>arr_age=(<br>12<br>13<br>14<br>15<br>41<br>31<br>21<br>)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还可以</span><br>names[0]=&quot;张三&quot;<br>names[1]=&quot;李四&quot;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>读取数组</strong>  <strong>${数组名[下标]}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_age=(<br>12<br>13<br>14<br>15<br>41<br>31<br>21<br>)<br><br>echo $&#123;arr_age[5]&#125; # 获取下标为5的<br>echo $&#123;arr_age[@]&#125; # 获取所有<br></code></pre></td></tr></table></figure></li><li><p><strong>读取数组的长度</strong></p><ul><li><p>获取数组长度的方法与获取字符串长度的方法相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_name=(&quot;张三&quot; &quot;李四&quot; &quot;王五&quot; &quot;赵六&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取数组中单个元素的长度</span><br>echo $&#123;#arr_name[0]&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取数组的长度</span><br>echo $&#123;#arr_name[*]&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="shell参数传递-位置参数"><a href="#shell参数传递-位置参数" class="headerlink" title="shell参数传递(位置参数)"></a>shell参数传递(位置参数)</h3><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>echo &quot;一共传递进$#个参数&quot;<br>echo &quot;进程ID为 : $$&quot;<br>echo &quot;第一个参数是 : $1&quot;<br>echo &quot;参数列表: $*&quot;              <br></code></pre></td></tr></table></figure><h3 id="shell基本运算符"><a href="#shell基本运算符" class="headerlink" title="shell基本运算符"></a>shell基本运算符</h3><ul><li><p><strong>种类</strong></p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul></li><li><p><strong>算术运算符</strong></p><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">&#x3D;</td><td align="left">赋值</td><td align="left">a&#x3D;$b 把变量 b 的值赋给 a。</td></tr><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a &#x3D;&#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>1. 条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a&#x3D;&#x3D;$b]</strong> 是错误的，必须写成 **[ $a &#x3D;&#x3D; $b ]**。</p><p>​2. 加减乘除 –&gt; expr 之间要有空格</p><p>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=10<br>b=20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">加</span><br>res=`expr $a + $b`<br>echo &quot;a + b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">减</span><br>res=`expr $a - $b`<br>echo &quot;a - b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">乘</span><br>res=`expr $a \* $b`<br>echo &quot;a * b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">除</span><br>res=`expr $b / $a`<br>echo &quot;b / a = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取余</span><br>res=`expr $a % $b`<br>echo &quot;a % b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">赋值</span><br>res=`expr a = $b`<br>echo &quot;a = b --&gt; $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断 == !=</span> <br><br>if [ $a != $b ]<br>then<br>echo &quot;a 不等于 b&quot;<br>elif []<br>then<br>echo &quot;&quot;<br>else<br>echo &quot;&quot;<br>fi<br><br>if [ $a == $b ]<br>then<br>echo &quot;a 等于 b&quot;<br><br>fi<br><br></code></pre></td></tr></table></figure></li><li><p><strong>关系运算符</strong></p><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</strong></p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">equal 检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">not equal 检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">greater than检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">less than检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">greater equal检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">less equal检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table></li></ul><p>​        </p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=10<br>b=20<br><br>if [ $A -eq $b  ]<br>then<br>echo &quot;-eq检测两个数是否相等 , 相等返回true&quot;<br>fi<br><br>if [ $a -ne $b  ]<br>then<br>echo &quot;-ne 检测两个数是否不相等 , 不相等返回true(取反)&quot;<br>fi<br><br></code></pre></td></tr></table></figure><ul><li><p><strong>布尔运算符</strong></p><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o  (or)</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a  (and)</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table></li><li><p><strong>逻辑运算符</strong></p><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table></li></ul><p>​语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>   [[ 第一个关系表达式 &amp;&amp; 第二个关系表达式 ]]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">test</span></span><br>echo &quot;笔试成绩&quot;<br>read a<br>echo &quot;机试成绩&quot;<br>read b<br><br>if [[ $a -ge 60 &amp;&amp; $b -ge 60 ]]<br>then<br>echo &quot;成绩合格&quot;<br>else<br>echo &quot;成绩不合格!!!&quot;<br>fi<br><br><br><br><br></code></pre></td></tr></table></figure><ul><li><p>字符串运算符</p><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a &#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否不为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table></li><li><p><strong>文件测试运算符</strong></p><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr></tbody></table></li></ul><hr><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>​对一个<strong>群体</strong> , 有<strong>相同操作</strong>的时候,使用循环</p><ul><li><p><code>for</code>循环</p><ul><li><p>&#96;&#96;&#96;shell<br>&#x2F;&#x2F;for</p><p>for((初始化语句A ; 判断语句B ; 控制语句C))<br>do<br>&#x2F;&#x2F;条件成立 , 执行语句<br>done</p><p>res&#x3D;0<br>for (( i&#x3D;1 ; i &lt;&#x3D; 100 ; i++ ));do<br>if [ $i % 2 &#x3D;&#x3D; 0 ]<br>then<br>echo <code>expr $res + i</code></p><p>#增强for循环<br>for </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 增强`f<span class="hljs-literal">or</span>`<br><br>    - `f<span class="hljs-literal">or</span> var in 集合`<br><br>- `while`循环<br><br>  - ```shell<br>    i=<span class="hljs-number">1</span><br>    while ( i &lt;= <span class="hljs-number">100</span> )<br>    do<br>    echo $i<br>    ((i++))<br>    done<br></code></pre></td></tr></table></figure></li></ul></li><li><p>examples</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>for (( i = 1; i &lt;= 100; i++ ))<br>do<br>echo $i<br>done<br><br>echo &quot;--------------------------&quot;<br><br>a=0<br>for (( i = 1; i &lt;= 100; i++ ))<br>do<br>a=`expr $a + $i`<br>done<br>echo &quot;所有数的和为：&quot; $a<br><br><br>echo &quot;---------------------------&quot;<br><br>for (( i = 0; i &lt;= 100; i = i+2 ))<br>do<br>echo &quot;偶数为：&quot;$i<br>a=`expr $a + $i`<br>done<br>echo &quot;偶数和为：&quot;$a<br><br><br>echo &quot;-----------------------------&quot;<br>for (( i = 1; i&lt;=100; i = i+2 ))<br>do<br>echo &quot;奇数为：&quot;$i<br>a=`expr $a + $i`<br>done<br>echo &quot;奇数和为：&quot;$a<br><br><br>echo &quot;---------------------------&quot;<br>list=&quot;a b c d e f g h i j k l m n o p q r s t u v w x y z&quot;<br>for var in &quot;a b c d e f g h i j k l m n o p q r s t u v w x y z&quot;<br>do<br>echo $var<br>done<br><br><br>echo &quot;-----------------------------&quot;<br><br>i=1<br>while [ $i -le 100 ]<br>do<br>echo $i<br>i=`expr $i + 1`<br>done<br><br>echo &quot;---------------------------&quot;<br><br>i=1<br>b=0<br>while [ $i -le 100 ]<br>do<br><span class="hljs-meta prompt_"># </span><span class="language-bash">i=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$i</span> + 1`</span><br>b=`expr $i + $b`<br>((i++))<br>done<br>echo $b<br><br><br><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>我的第一个博客网站</title>
    <link href="http://example.com/2023/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <id>http://example.com/2023/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</id>
    <published>2023-01-25T13:08:27.000Z</published>
    <updated>2023-02-02T01:12:36.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;&#92;assets&#92;css&#92;APlayer.min.css&quot;&gt;&lt;script src=&quot;&#92;assets&#92;js&#92;APlayer.min.js&quot; cla</summary>
      
    
    
    
    
  </entry>
  
</feed>
