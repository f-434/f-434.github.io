<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MarkDown基础语法</title>
    <link href="/2023/01/25/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <url>/2023/01/25/MarkDown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h5 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h5><blockquote><blockquote><p>We believe that writing is about content, about what you want to say – not about fancy formatting.  </p><p>重内容,轻形式</p></blockquote></blockquote><blockquote><ol><li><p>此教程仅个人整理,<strong>仅入门</strong>,如有错误,还望指正</p></li><li><p>此教程所用编辑器为 <u><strong>VSCode</strong></u></p></li><li><p>需要用到的插件 <u><strong>Markdown Preview Enhanced</strong></u></p><p>by <a href="https://github.com/f-434">f-434 </a></p></li></ol></blockquote><h3 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h3><ul><li>Markdown 是一种<strong>轻量级标记语言</strong>，它允许人们使用易读易写的纯文本格式编写文档。</li><li>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。最开始是为了让使用者更方便的转换html</li><li>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</li><li>Markdown 编写的文档后缀为 <code>.md</code> , <code>.markdown</code></li></ul><h3 id="Markdown-的优点"><a href="#Markdown-的优点" class="headerlink" title="Markdown 的优点"></a>Markdown 的优点</h3><ul><li>专注你的文字内容而不是排版样式，安心写作。</li><li>轻松的导出 HTML、PDF 和本身的 .md 文件。</li><li>纯文本内容，兼容所有的文本编辑器与字处理软件。</li><li>随时修改你的文章版本，不必像字处理软件生成若干文件版本导致混乱。</li><li>可读、直观、学习成本低。</li></ul><h3 id="Markdown标题"><a href="#Markdown标题" class="headerlink" title="Markdown标题"></a>Markdown标题</h3><ol><li><p>使用 &#x3D; 和 - 标记一级和二级标题</p></li><li><p>使用 # 号标记</p><ul><li>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。 <figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># h1<br>## h2<br>### h3<br>#### h4<br>##### h5<br>###### h6<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Markdown段落"><a href="#Markdown段落" class="headerlink" title="Markdown段落"></a>Markdown段落</h3><ol><li><p>段落换行</p><ul><li>段落的换行是使用两个以上空格加上回车  </li><li>也可以在段落后面使用一个空行来表示重新开始一个段落。</li></ul></li><li><p>字体样式</p>   <figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span><span class="hljs-strong">*斜体文字*</span><br><span class="hljs-bullet">- </span><span class="hljs-emphasis">_斜体文字_</span><br><span class="hljs-bullet">- </span><span class="hljs-emphasis">__粗体文字__</span><br><span class="hljs-bullet">- </span><span class="hljs-strong">***粗斜体文字**</span>*<br><span class="hljs-bullet">- </span><span class="hljs-emphasis">___粗斜体文字__</span>_<br></code></pre></td></tr></table></figure></li><li><p>分割线</p><ul><li>在一行中用三个以上的星号、减号、下划线来建立一个分隔线，行内不能有其他东西</li><li>也可以在星号或是减号中间插入空格 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> * *<br><span class="hljs-bullet">-</span> - -<br><span class="hljs-section"><span class="hljs-strong">****</span>**</span><br><span class="hljs-section">------</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>删除线</p><ul><li>只需要在需要加删除线的文字的两端加上两个波浪线 ~~ 即可</li></ul></li></ol><pre><code class="hljs">`  ~~删除线~~`</code></pre><ol start="5"><li>下划线<ul><li>可以通过 HTML 的标签来实现</li></ul></li></ol><pre><code class="hljs">` &lt;u&gt;下划线&lt;/u&gt;</code></pre><p>  &#96;</p><ol><li>脚注<ul><li>脚注是对文本的补充说明。</li><li>格式为: [^ 内容]  <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">致谢[^文本]<br>[<span class="hljs-symbol">^文本</span>]: <span class="hljs-link">感谢观看此教程</span><br><span class="hljs-code">            </span><br></code></pre></td></tr></table></figure>  <img src="/img/%E8%84%9A%E6%B3%A8.png" alt="脚注"></li></ul></li></ol><h3 id="Markdown列表"><a href="#Markdown列表" class="headerlink" title="Markdown列表"></a>Markdown列表</h3><ol><li><p>无序列表</p><ul><li><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容</p> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 列表1<br><span class="hljs-bullet">*</span> 列表2<br><br><span class="hljs-bullet">+</span> 列表1<br><span class="hljs-bullet">+</span> 列表2<br><br><span class="hljs-bullet">-</span> 列表1<br><span class="hljs-bullet">-</span> 列表2<br></code></pre></td></tr></table></figure></li></ul></li><li><p>有序列表</p><ul><li>有序列表使用数字并加上 . 号来表示<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. 排名<span class="hljs-number">1</span><br><span class="hljs-attribute">2</span>. 排名<span class="hljs-number">2</span><br><br></code></pre></td></tr></table></figure></li></ul></li><li><p>列表嵌套</p><ul><li>列表嵌套只需在子列表中的选项前面添加四个空格 <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表1<br><span class="hljs-bullet">    1.</span> 排名1<br><span class="hljs-bullet">    2.</span> 排名2<br><span class="hljs-bullet">-</span> 列表2<br><span class="hljs-bullet">    1.</span> 排名1<br><span class="hljs-bullet">    2.</span> 排名2<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h3><ol><li>Markdown 区块引用是在段落开头使用 &gt; 符号 ，然后后面紧跟一个空格符号</li><li>区块是可以嵌套的，一个 &gt; 符号是最外层，两个 &gt; 符号是第一层嵌套，以此类推：   <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">&gt; 内容</span><br></code></pre></td></tr></table></figure></li><li>区块中使用列表  <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">- 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">1.</span> 内容</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-number">2.</span> 内容</span><br></code></pre></td></tr></table></figure></li><li>列表中使用区块  <figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-bullet">-</span> <span class="hljs-string">主题一</span><br>      <br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第一项</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第二项</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">主题二</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第一项</span><br>    <span class="hljs-punctuation">&gt;</span> <span class="hljs-string">第二项</span><br>      <br></code></pre></td></tr></table></figure></li></ol><h3 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h3><ol><li><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（&#96;）</p></li><li><p>代码块使用 4 个空格或者一个制表符（Tab 键）</p></li><li><p>也可以用 &#96;&#96;&#96; 包裹一段代码，并指定一种语言（也可以不指定）,指定的好处:<strong>代码高亮显示</strong></p></li></ol><ul><li>指定   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(soc.getInputStream()));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">// TODO Auto-generated catch block</span><br>            e.printStackTrace();<br>        &#125;<br>        <br>    &#125;<br>        <br></code></pre></td></tr></table></figure><ul><li>不指定   <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span>()</span> &#123;<br>                    <br>                    BufferedReader reader = <span class="hljs-literal">null</span>;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        reader = <span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> InputStreamReader(soc.getInputStream()));<br>                    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                        <span class="hljs-comment">// TODO Auto-generated catch block</span><br>                        e.printStackTrace();<br>                    &#125;<br>                    <br>                &#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h3><ol><li>带有链接别名<br>  <code> [链接名称](链接地址)</code><br>  <a href="https://github.com/f-434">yanchaoyu</a></li><li>不带别名<br><code>&lt;链接地址&gt;</code><br><a href="https://github.com/f-434">https://github.com/f-434</a></li></ol><h3 id="Markdown-图片"><a href="#Markdown-图片" class="headerlink" title="Markdown 图片"></a>Markdown 图片</h3><ul><li>格式如下:<blockquote><ol><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字<br>  <strong>Markdown 还没有办法指定图片的高度与宽度，如果你需要的话，你可以使用普通的 &lt;img&gt;标签</strong></li></ol></blockquote></li></ul><h3 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h3><ul><li><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行<br> 语法如下:</p> <figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头   </span>|<br>|<span class="hljs-string">  ----   </span>|<span class="hljs-string"> ----- </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<br></code></pre></td></tr></table></figure></li><li><p>我们可以设置表格的对齐方式：</p><ul><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  表头   </span>|<span class="hljs-string"> 表头   </span>|<span class="hljs-string"> 表头  </span>|<br>|<span class="hljs-string">  :----  </span>|<span class="hljs-string"> :----:</span>|<span class="hljs-string"> ----: </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>|<span class="hljs-string"> 单元格  </span>|<span class="hljs-string"> 单元格 </span>|<span class="hljs-string"> 单元格 </span>|<br>    <br></code></pre></td></tr></table></figure></li></ul><h3 id="Markdown-选框"><a href="#Markdown-选框" class="headerlink" title="Markdown 选框"></a>Markdown 选框</h3><p><code> - [ ] 复选框</code><br><code> - [X] 复选框(选中)</code></p><ul><li><input disabled="" type="checkbox"> 语文</li><li><input disabled="" type="checkbox"> 地理</li><li><input disabled="" type="checkbox"> 生物</li><li><input checked="" disabled="" type="checkbox"> java</li><li><input checked="" disabled="" type="checkbox"> Python</li><li><input checked="" disabled="" type="checkbox"> Hadoop</li><li><input checked="" disabled="" type="checkbox"> ….</li></ul><p>| 表头 | 表头 |</p><p>|——|—–|</p><p>|  1  |  2   |</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LinuxSell部分</title>
    <link href="/2023/01/25/LinuxSell%E9%83%A8%E5%88%86/"/>
    <url>/2023/01/25/LinuxSell%E9%83%A8%E5%88%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Shell初识"><a href="#Shell初识" class="headerlink" title="Shell初识"></a>Shell初识</h1><ol><li><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p></li><li><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p></li><li><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!&#x2F;bin&#x2F;sh</strong>，它同样也可以改为 <strong>#!&#x2F;bin&#x2F;bash</strong>。</p><p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p></li></ol><h3 id="运行shell的两种方式"><a href="#运行shell的两种方式" class="headerlink" title="运行shell的两种方式"></a>运行shell的两种方式</h3><ol><li><strong>作为可执行程序</strong></li><li><strong>作为解释器参数</strong></li></ol><h3 id="编写步骤"><a href="#编写步骤" class="headerlink" title="编写步骤"></a>编写步骤</h3><ol><li>创建 <code>.sh</code>文件 –&gt; <code>touch test.sh</code></li><li>赋予可执行权限 –&gt; <code>chmod +x test.sh</code></li><li>编辑脚本 –&gt; <code>vim test.sh</code></li><li>执行脚本 –&gt; <code>./ test.sh</code></li></ol><h3 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h3><ol><li><p><strong>命名规范</strong></p><ul><li><p>变量名和等号之间不能有空格.</p></li><li><p>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</p></li><li><p>中间不能有空格，可以使用下划线 **_**。</p></li><li><p>不能使用标点符号。</p></li><li><p>变量声明等号左右没有空格</p></li><li><p>不能使用bash里的关键字（可用help命令查看保留关键字）。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>age = 16<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>使用变量</strong></p><ul><li><p>使用一个定义过的变量，只要在变量名前面加美元符号即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>echo $name<br>echo $&#123;name&#125;<br></code></pre></td></tr></table></figure></li><li><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界(<strong>推荐添加</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">age =16<br>echo $age<br>echo $&#123;age&#125;years<br></code></pre></td></tr></table></figure><p>注意 : 如果不给<code>age</code>变量加花括号，写成<code>echo $ageyears</code>，解释器就会把<code>$ageyears</code>当成一个变量（其值为空），代码执行结果就不是我们期望的样子</p></li></ul></li><li><p><strong>只读变量(readonly )</strong></p><ul><li><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">myid = 1000<br>readonly myid<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>删除变量 (unset)</strong></p><ul><li><p>使用 unset 命令可以删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>name = &quot;张三&quot;<br><br>unset name<br><br>echo name #没有任何输出<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>变量类型</strong></p><ul><li><strong>局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul></li></ol><hr><h3 id="shell-字符串"><a href="#shell-字符串" class="headerlink" title="shell 字符串"></a>shell 字符串</h3><ul><li><p><strong>单引号</strong></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">str</span> = <span class="hljs-string">&#x27;aaa bbb ccc&#x27;</span><br></code></pre></td></tr></table></figure><p>特点 : </p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul></li><li><p><strong>双引号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">name = &quot;张三&quot;<br>str = &quot;xingming : $&#123;name&#125; , 年龄\&quot; 16岁 \&quot; , 性别 : 男&quot;<br></code></pre></td></tr></table></figure><p>特点:</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul></li><li><p>拼接字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>name = &quot;张三&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">双引号</span><br>str1 = &quot;你好 , $&#123;name&#125; !&quot;<br>str2 = &quot;你好 , &quot;$name&quot; !&quot;<br><br>echo $str1 $str2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">单引号</span><br>str3 = &#x27;你好 , &#x27;$name&#x27; !&#x27;<br>str4 = &#x27;你好 , $&#123;name&#125;&#x27; !&#x27;<br><br>echo $str3 $str4<br><br><br><br></code></pre></td></tr></table></figure></li><li><p><strong>获取字符串长度</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd&quot;<br>echo $&#123;#string&#125; # 结果为4<br></code></pre></td></tr></table></figure></li><li><p><strong>提取字符串</strong>   (<strong>第一个字符的索引值为 0</strong>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd&quot;<br>echo $&#123;string:1:3&#125; # 输出 bcd<br></code></pre></td></tr></table></figure></li><li><p><strong>查找字符串 (以上脚本中   &#96;    是反引号，而不是单引号  ‘   )</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">string = &quot;abcd abcd abcd&quot;<br>echo `expr index &quot;$&#123;string&#125;&quot; cd` # 输出2<br><span class="hljs-meta prompt_"># </span><span class="language-bash">谁先出现 , 输出谁的下标, 默认从 0 开始</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="shell数组"><a href="#shell数组" class="headerlink" title="shell数组"></a>shell数组</h3><ul><li><p><strong>bash支持一维数组（不支持多维数组），并且没有限定数组的大小</strong>。</p></li><li><p><strong>定义数组</strong></p><ul><li><p>用括号来表示数组，数组元素用”空格”符号分割开</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_name=(&quot;张三&quot; &quot;李四&quot; &quot;王五&quot; &quot;赵六&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者</span><br>arr_age=(<br>12<br>13<br>14<br>15<br>41<br>31<br>21<br>)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">还可以</span><br>names[0]=&quot;张三&quot;<br>names[1]=&quot;李四&quot;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>读取数组</strong>  <strong>${数组名[下标]}</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_age=(<br>12<br>13<br>14<br>15<br>41<br>31<br>21<br>)<br><br>echo $&#123;arr_age[5]&#125; # 获取下标为5的<br>echo $&#123;arr_age[@]&#125; # 获取所有<br></code></pre></td></tr></table></figure></li><li><p><strong>读取数组的长度</strong></p><ul><li><p>获取数组长度的方法与获取字符串长度的方法相同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">arr_name=(&quot;张三&quot; &quot;李四&quot; &quot;王五&quot; &quot;赵六&quot;)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取数组中单个元素的长度</span><br>echo $&#123;#arr_name[0]&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取数组的长度</span><br>echo $&#123;#arr_name[*]&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="shell参数传递-位置参数"><a href="#shell参数传递-位置参数" class="headerlink" title="shell参数传递(位置参数)"></a>shell参数传递(位置参数)</h3><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>echo &quot;一共传递进$#个参数&quot;<br>echo &quot;进程ID为 : $$&quot;<br>echo &quot;第一个参数是 : $1&quot;<br>echo &quot;参数列表: $*&quot;              <br></code></pre></td></tr></table></figure><h3 id="shell基本运算符"><a href="#shell基本运算符" class="headerlink" title="shell基本运算符"></a>shell基本运算符</h3><ul><li><p><strong>种类</strong></p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul></li><li><p><strong>算术运算符</strong></p><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">&#x2F;</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">&#x3D;</td><td align="left">赋值</td><td align="left">a&#x3D;$b 把变量 b 的值赋给 a。</td></tr><tr><td align="left">&#x3D;&#x3D;</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a &#x3D;&#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>1. 条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a&#x3D;&#x3D;$b]</strong> 是错误的，必须写成 **[ $a &#x3D;&#x3D; $b ]**。</p><p>​2. 加减乘除 –&gt; expr 之间要有空格</p><p>​</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=10<br>b=20<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">加</span><br>res=`expr $a + $b`<br>echo &quot;a + b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">减</span><br>res=`expr $a - $b`<br>echo &quot;a - b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">乘</span><br>res=`expr $a \* $b`<br>echo &quot;a * b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">除</span><br>res=`expr $b / $a`<br>echo &quot;b / a = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取余</span><br>res=`expr $a % $b`<br>echo &quot;a % b = $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">赋值</span><br>res=`expr a = $b`<br>echo &quot;a = b --&gt; $&#123;res&#125;&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断 == !=</span> <br><br>if [ $a != $b ]<br>then<br>echo &quot;a 不等于 b&quot;<br>elif []<br>then<br>echo &quot;&quot;<br>else<br>echo &quot;&quot;<br>fi<br><br>if [ $a == $b ]<br>then<br>echo &quot;a 等于 b&quot;<br><br>fi<br><br></code></pre></td></tr></table></figure></li><li><p><strong>关系运算符</strong></p><p><strong>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</strong></p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">equal 检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">not equal 检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">greater than检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">less than检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">greater equal检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">less equal检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table></li></ul><p>​        </p>   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><br>a=10<br>b=20<br><br>if [ $A -eq $b  ]<br>then<br>echo &quot;-eq检测两个数是否相等 , 相等返回true&quot;<br>fi<br><br>if [ $a -ne $b  ]<br>then<br>echo &quot;-ne 检测两个数是否不相等 , 不相等返回true(取反)&quot;<br>fi<br><br></code></pre></td></tr></table></figure><ul><li><p><strong>布尔运算符</strong></p><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o  (or)</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a  (and)</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table></li><li><p><strong>逻辑运算符</strong></p><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table></li></ul><p>​语法:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br>   [[ 第一个关系表达式 &amp;&amp; 第二个关系表达式 ]]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">test</span></span><br>echo &quot;笔试成绩&quot;<br>read a<br>echo &quot;机试成绩&quot;<br>read b<br><br>if [[ $a -ge 60 &amp;&amp; $b -ge 60 ]]<br>then<br>echo &quot;成绩合格&quot;<br>else<br>echo &quot;成绩不合格!!!&quot;<br>fi<br><br><br><br><br></code></pre></td></tr></table></figure><ul><li><p>字符串运算符</p><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a &#x3D; $b ] 返回 false。</td></tr><tr><td align="left">!&#x3D;</td><td align="left">检测两个字符串是否不相等，不相等返回 true。</td><td align="left">[ $a !&#x3D; $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否不为 0，不为 0 返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否不为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table></li><li><p><strong>文件测试运算符</strong></p><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr></tbody></table></li></ul><hr><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>​对一个<strong>群体</strong> , 有<strong>相同操作</strong>的时候,使用循环</p><ul><li><p><code>for</code>循环</p><ul><li><p>&#96;&#96;&#96;shell<br>&#x2F;&#x2F;for</p><p>for((初始化语句A ; 判断语句B ; 控制语句C))<br>do<br>&#x2F;&#x2F;条件成立 , 执行语句<br>done</p><p>res&#x3D;0<br>for (( i&#x3D;1 ; i &lt;&#x3D; 100 ; i++ ));do<br>if [ $i % 2 &#x3D;&#x3D; 0 ]<br>then<br>echo <code>expr $res + i</code></p><p>#增强for循环<br>for </p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey"><br>  - 增强`f<span class="hljs-literal">or</span>`<br><br>    - `f<span class="hljs-literal">or</span> var in 集合`<br><br>- `while`循环<br><br>  - ```shell<br>    i=<span class="hljs-number">1</span><br>    while ( i &lt;= <span class="hljs-number">100</span> )<br>    do<br>    echo $i<br>    ((i++))<br>    done<br></code></pre></td></tr></table></figure></li></ul></li><li><p>examples</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>for (( i = 1; i &lt;= 100; i++ ))<br>do<br>echo $i<br>done<br><br>echo &quot;--------------------------&quot;<br><br>a=0<br>for (( i = 1; i &lt;= 100; i++ ))<br>do<br>a=`expr $a + $i`<br>done<br>echo &quot;所有数的和为：&quot; $a<br><br><br>echo &quot;---------------------------&quot;<br><br>for (( i = 0; i &lt;= 100; i = i+2 ))<br>do<br>echo &quot;偶数为：&quot;$i<br>a=`expr $a + $i`<br>done<br>echo &quot;偶数和为：&quot;$a<br><br><br>echo &quot;-----------------------------&quot;<br>for (( i = 1; i&lt;=100; i = i+2 ))<br>do<br>echo &quot;奇数为：&quot;$i<br>a=`expr $a + $i`<br>done<br>echo &quot;奇数和为：&quot;$a<br><br><br>echo &quot;---------------------------&quot;<br>list=&quot;a b c d e f g h i j k l m n o p q r s t u v w x y z&quot;<br>for var in &quot;a b c d e f g h i j k l m n o p q r s t u v w x y z&quot;<br>do<br>echo $var<br>done<br><br><br>echo &quot;-----------------------------&quot;<br><br>i=1<br>while [ $i -le 100 ]<br>do<br>echo $i<br>i=`expr $i + 1`<br>done<br><br>echo &quot;---------------------------&quot;<br><br>i=1<br>b=0<br>while [ $i -le 100 ]<br>do<br><span class="hljs-meta prompt_"># </span><span class="language-bash">i=`<span class="hljs-built_in">expr</span> <span class="hljs-variable">$i</span> + 1`</span><br>b=`expr $i + $b`<br>((i++))<br>done<br>echo $b<br><br><br><br><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的第一个博客网站</title>
    <link href="/2023/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
    <url>/2023/01/25/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
